// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: storageserver.proto

#include "storageserver.pb.h"
#include "storageserver.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace backend {

static const char* StorageServer_method_names[] = {
  "/backend.StorageServer/PushStorageTablets",
  "/backend.StorageServer/StorageGet",
  "/backend.StorageServer/StoragePut",
  "/backend.StorageServer/StorageCPut",
  "/backend.StorageServer/StorageDelete",
  "/backend.StorageServer/KillServer",
  "/backend.StorageServer/ReviveServer",
  "/backend.StorageServer/GetKVStoreState",
  "/backend.StorageServer/RequestLatestTabletState",
  "/backend.StorageServer/PushCheckpointPartition",
  "/backend.StorageServer/PushLog",
  "/backend.StorageServer/PulseCheck",
};

std::unique_ptr< StorageServer::Stub> StorageServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StorageServer::Stub> stub(new StorageServer::Stub(channel, options));
  return stub;
}

StorageServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PushStorageTablets_(StorageServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StorageGet_(StorageServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoragePut_(StorageServer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StorageCPut_(StorageServer_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StorageDelete_(StorageServer_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KillServer_(StorageServer_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReviveServer_(StorageServer_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetKVStoreState_(StorageServer_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestLatestTabletState_(StorageServer_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PushCheckpointPartition_(StorageServer_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_PushLog_(StorageServer_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PulseCheck_(StorageServer_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status StorageServer::Stub::PushStorageTablets(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest& request, ::backend::StorageServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::PushStorageTabletsRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PushStorageTablets_, context, request, response);
}

void StorageServer::Stub::async::PushStorageTablets(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::PushStorageTabletsRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushStorageTablets_, context, request, response, std::move(f));
}

void StorageServer::Stub::async::PushStorageTablets(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushStorageTablets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::PrepareAsyncPushStorageTabletsRaw(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::StorageServerResponse, ::backend::PushStorageTabletsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PushStorageTablets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::AsyncPushStorageTabletsRaw(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPushStorageTabletsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageServer::Stub::StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StorageGet_, context, request, response);
}

void StorageServer::Stub::async::StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StorageGet_, context, request, response, std::move(f));
}

void StorageServer::Stub::async::StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StorageGet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::PrepareAsyncStorageGetRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::StorageServerResponse, ::backend::StorageServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StorageGet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::AsyncStorageGetRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStorageGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageServer::Stub::StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StoragePut_, context, request, response);
}

void StorageServer::Stub::async::StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoragePut_, context, request, response, std::move(f));
}

void StorageServer::Stub::async::StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoragePut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::PrepareAsyncStoragePutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::StorageServerResponse, ::backend::StorageServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StoragePut_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::AsyncStoragePutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStoragePutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageServer::Stub::StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StorageCPut_, context, request, response);
}

void StorageServer::Stub::async::StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StorageCPut_, context, request, response, std::move(f));
}

void StorageServer::Stub::async::StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StorageCPut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::PrepareAsyncStorageCPutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::StorageServerResponse, ::backend::StorageServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StorageCPut_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::AsyncStorageCPutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStorageCPutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageServer::Stub::StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StorageDelete_, context, request, response);
}

void StorageServer::Stub::async::StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StorageDelete_, context, request, response, std::move(f));
}

void StorageServer::Stub::async::StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StorageDelete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::PrepareAsyncStorageDeleteRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::StorageServerResponse, ::backend::StorageServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StorageDelete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::AsyncStorageDeleteRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStorageDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageServer::Stub::KillServer(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::backend::StorageEmpty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::StorageEmpty, ::backend::StorageEmpty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_KillServer_, context, request, response);
}

void StorageServer::Stub::async::KillServer(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::StorageEmpty, ::backend::StorageEmpty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KillServer_, context, request, response, std::move(f));
}

void StorageServer::Stub::async::KillServer(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KillServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>* StorageServer::Stub::PrepareAsyncKillServerRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::StorageEmpty, ::backend::StorageEmpty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_KillServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>* StorageServer::Stub::AsyncKillServerRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncKillServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageServer::Stub::ReviveServer(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::backend::StorageEmpty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::StorageEmpty, ::backend::StorageEmpty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReviveServer_, context, request, response);
}

void StorageServer::Stub::async::ReviveServer(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::StorageEmpty, ::backend::StorageEmpty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReviveServer_, context, request, response, std::move(f));
}

void StorageServer::Stub::async::ReviveServer(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReviveServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>* StorageServer::Stub::PrepareAsyncReviveServerRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::StorageEmpty, ::backend::StorageEmpty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReviveServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>* StorageServer::Stub::AsyncReviveServerRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReviveServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageServer::Stub::GetKVStoreState(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest& request, ::backend::StorageGetKVStoreStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::StorageGetKVStoreStateRequest, ::backend::StorageGetKVStoreStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetKVStoreState_, context, request, response);
}

void StorageServer::Stub::async::GetKVStoreState(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest* request, ::backend::StorageGetKVStoreStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::StorageGetKVStoreStateRequest, ::backend::StorageGetKVStoreStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetKVStoreState_, context, request, response, std::move(f));
}

void StorageServer::Stub::async::GetKVStoreState(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest* request, ::backend::StorageGetKVStoreStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetKVStoreState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageGetKVStoreStateResponse>* StorageServer::Stub::PrepareAsyncGetKVStoreStateRaw(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::StorageGetKVStoreStateResponse, ::backend::StorageGetKVStoreStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetKVStoreState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageGetKVStoreStateResponse>* StorageServer::Stub::AsyncGetKVStoreStateRaw(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetKVStoreStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageServer::Stub::RequestLatestTabletState(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest& request, ::backend::RequestLatestTabletStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::RequestLatestTabletStateRequest, ::backend::RequestLatestTabletStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestLatestTabletState_, context, request, response);
}

void StorageServer::Stub::async::RequestLatestTabletState(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest* request, ::backend::RequestLatestTabletStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::RequestLatestTabletStateRequest, ::backend::RequestLatestTabletStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestLatestTabletState_, context, request, response, std::move(f));
}

void StorageServer::Stub::async::RequestLatestTabletState(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest* request, ::backend::RequestLatestTabletStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestLatestTabletState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::RequestLatestTabletStateResponse>* StorageServer::Stub::PrepareAsyncRequestLatestTabletStateRaw(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::RequestLatestTabletStateResponse, ::backend::RequestLatestTabletStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestLatestTabletState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::RequestLatestTabletStateResponse>* StorageServer::Stub::AsyncRequestLatestTabletStateRaw(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestLatestTabletStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::backend::PushCheckpointPartitionRequest>* StorageServer::Stub::PushCheckpointPartitionRaw(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::backend::PushCheckpointPartitionRequest>::Create(channel_.get(), rpcmethod_PushCheckpointPartition_, context, response);
}

void StorageServer::Stub::async::PushCheckpointPartition(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response, ::grpc::ClientWriteReactor< ::backend::PushCheckpointPartitionRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::backend::PushCheckpointPartitionRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_PushCheckpointPartition_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::backend::PushCheckpointPartitionRequest>* StorageServer::Stub::AsyncPushCheckpointPartitionRaw(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::backend::PushCheckpointPartitionRequest>::Create(channel_.get(), cq, rpcmethod_PushCheckpointPartition_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::backend::PushCheckpointPartitionRequest>* StorageServer::Stub::PrepareAsyncPushCheckpointPartitionRaw(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::backend::PushCheckpointPartitionRequest>::Create(channel_.get(), cq, rpcmethod_PushCheckpointPartition_, context, response, false, nullptr);
}

::grpc::Status StorageServer::Stub::PushLog(::grpc::ClientContext* context, const ::backend::PushLogRequest& request, ::backend::PushLogResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::PushLogRequest, ::backend::PushLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PushLog_, context, request, response);
}

void StorageServer::Stub::async::PushLog(::grpc::ClientContext* context, const ::backend::PushLogRequest* request, ::backend::PushLogResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::PushLogRequest, ::backend::PushLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushLog_, context, request, response, std::move(f));
}

void StorageServer::Stub::async::PushLog(::grpc::ClientContext* context, const ::backend::PushLogRequest* request, ::backend::PushLogResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PushLog_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::PushLogResponse>* StorageServer::Stub::PrepareAsyncPushLogRaw(::grpc::ClientContext* context, const ::backend::PushLogRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::PushLogResponse, ::backend::PushLogRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PushLog_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::PushLogResponse>* StorageServer::Stub::AsyncPushLogRaw(::grpc::ClientContext* context, const ::backend::PushLogRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPushLogRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageServer::Stub::PulseCheck(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::backend::StorageEmpty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::StorageEmpty, ::backend::StorageEmpty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PulseCheck_, context, request, response);
}

void StorageServer::Stub::async::PulseCheck(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::StorageEmpty, ::backend::StorageEmpty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PulseCheck_, context, request, response, std::move(f));
}

void StorageServer::Stub::async::PulseCheck(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PulseCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>* StorageServer::Stub::PrepareAsyncPulseCheckRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::StorageEmpty, ::backend::StorageEmpty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PulseCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>* StorageServer::Stub::AsyncPulseCheckRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPulseCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

StorageServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageServer::Service, ::backend::PushStorageTabletsRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::PushStorageTabletsRequest* req,
             ::backend::StorageServerResponse* resp) {
               return service->PushStorageTablets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageServer::Service, ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::StorageServerRequest* req,
             ::backend::StorageServerResponse* resp) {
               return service->StorageGet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageServer::Service, ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::StorageServerRequest* req,
             ::backend::StorageServerResponse* resp) {
               return service->StoragePut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageServer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageServer::Service, ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::StorageServerRequest* req,
             ::backend::StorageServerResponse* resp) {
               return service->StorageCPut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageServer_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageServer::Service, ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::StorageServerRequest* req,
             ::backend::StorageServerResponse* resp) {
               return service->StorageDelete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageServer_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageServer::Service, ::backend::StorageEmpty, ::backend::StorageEmpty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::StorageEmpty* req,
             ::backend::StorageEmpty* resp) {
               return service->KillServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageServer_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageServer::Service, ::backend::StorageEmpty, ::backend::StorageEmpty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::StorageEmpty* req,
             ::backend::StorageEmpty* resp) {
               return service->ReviveServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageServer_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageServer::Service, ::backend::StorageGetKVStoreStateRequest, ::backend::StorageGetKVStoreStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::StorageGetKVStoreStateRequest* req,
             ::backend::StorageGetKVStoreStateResponse* resp) {
               return service->GetKVStoreState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageServer_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageServer::Service, ::backend::RequestLatestTabletStateRequest, ::backend::RequestLatestTabletStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::RequestLatestTabletStateRequest* req,
             ::backend::RequestLatestTabletStateResponse* resp) {
               return service->RequestLatestTabletState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageServer_method_names[9],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< StorageServer::Service, ::backend::PushCheckpointPartitionRequest, ::backend::PushCheckpointPartitionResponse>(
          [](StorageServer::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::backend::PushCheckpointPartitionRequest>* reader,
             ::backend::PushCheckpointPartitionResponse* resp) {
               return service->PushCheckpointPartition(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageServer_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageServer::Service, ::backend::PushLogRequest, ::backend::PushLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::PushLogRequest* req,
             ::backend::PushLogResponse* resp) {
               return service->PushLog(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageServer_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageServer::Service, ::backend::StorageEmpty, ::backend::StorageEmpty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::StorageEmpty* req,
             ::backend::StorageEmpty* resp) {
               return service->PulseCheck(ctx, req, resp);
             }, this)));
}

StorageServer::Service::~Service() {
}

::grpc::Status StorageServer::Service::PushStorageTablets(::grpc::ServerContext* context, const ::backend::PushStorageTabletsRequest* request, ::backend::StorageServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageServer::Service::StorageGet(::grpc::ServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageServer::Service::StoragePut(::grpc::ServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageServer::Service::StorageCPut(::grpc::ServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageServer::Service::StorageDelete(::grpc::ServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageServer::Service::KillServer(::grpc::ServerContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageServer::Service::ReviveServer(::grpc::ServerContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageServer::Service::GetKVStoreState(::grpc::ServerContext* context, const ::backend::StorageGetKVStoreStateRequest* request, ::backend::StorageGetKVStoreStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageServer::Service::RequestLatestTabletState(::grpc::ServerContext* context, const ::backend::RequestLatestTabletStateRequest* request, ::backend::RequestLatestTabletStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageServer::Service::PushCheckpointPartition(::grpc::ServerContext* context, ::grpc::ServerReader< ::backend::PushCheckpointPartitionRequest>* reader, ::backend::PushCheckpointPartitionResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageServer::Service::PushLog(::grpc::ServerContext* context, const ::backend::PushLogRequest* request, ::backend::PushLogResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageServer::Service::PulseCheck(::grpc::ServerContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace backend

