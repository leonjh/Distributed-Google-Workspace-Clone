// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: storageserver.proto
#ifndef GRPC_storageserver_2eproto__INCLUDED
#define GRPC_storageserver_2eproto__INCLUDED

#include "storageserver.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace backend {

class StorageServer final {
 public:
  static constexpr char const* service_full_name() {
    return "backend.StorageServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status PushStorageTablets(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest& request, ::backend::StorageServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> AsyncPushStorageTablets(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(AsyncPushStorageTabletsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> PrepareAsyncPushStorageTablets(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(PrepareAsyncPushStorageTabletsRaw(context, request, cq));
    }
    virtual ::grpc::Status StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> AsyncStorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(AsyncStorageGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> PrepareAsyncStorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(PrepareAsyncStorageGetRaw(context, request, cq));
    }
    virtual ::grpc::Status StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> AsyncStoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(AsyncStoragePutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> PrepareAsyncStoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(PrepareAsyncStoragePutRaw(context, request, cq));
    }
    virtual ::grpc::Status StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> AsyncStorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(AsyncStorageCPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> PrepareAsyncStorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(PrepareAsyncStorageCPutRaw(context, request, cq));
    }
    virtual ::grpc::Status StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> AsyncStorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(AsyncStorageDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> PrepareAsyncStorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(PrepareAsyncStorageDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status KillServer(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::backend::StorageEmpty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>> AsyncKillServer(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>>(AsyncKillServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>> PrepareAsyncKillServer(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>>(PrepareAsyncKillServerRaw(context, request, cq));
    }
    virtual ::grpc::Status ReviveServer(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::backend::StorageEmpty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>> AsyncReviveServer(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>>(AsyncReviveServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>> PrepareAsyncReviveServer(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>>(PrepareAsyncReviveServerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetKVStoreState(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest& request, ::backend::StorageGetKVStoreStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageGetKVStoreStateResponse>> AsyncGetKVStoreState(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageGetKVStoreStateResponse>>(AsyncGetKVStoreStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageGetKVStoreStateResponse>> PrepareAsyncGetKVStoreState(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageGetKVStoreStateResponse>>(PrepareAsyncGetKVStoreStateRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestLatestTabletState(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest& request, ::backend::RequestLatestTabletStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::RequestLatestTabletStateResponse>> AsyncRequestLatestTabletState(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::RequestLatestTabletStateResponse>>(AsyncRequestLatestTabletStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::RequestLatestTabletStateResponse>> PrepareAsyncRequestLatestTabletState(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::RequestLatestTabletStateResponse>>(PrepareAsyncRequestLatestTabletStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::backend::PushCheckpointPartitionRequest>> PushCheckpointPartition(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::backend::PushCheckpointPartitionRequest>>(PushCheckpointPartitionRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::backend::PushCheckpointPartitionRequest>> AsyncPushCheckpointPartition(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::backend::PushCheckpointPartitionRequest>>(AsyncPushCheckpointPartitionRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::backend::PushCheckpointPartitionRequest>> PrepareAsyncPushCheckpointPartition(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::backend::PushCheckpointPartitionRequest>>(PrepareAsyncPushCheckpointPartitionRaw(context, response, cq));
    }
    virtual ::grpc::Status PushLog(::grpc::ClientContext* context, const ::backend::PushLogRequest& request, ::backend::PushLogResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::PushLogResponse>> AsyncPushLog(::grpc::ClientContext* context, const ::backend::PushLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::PushLogResponse>>(AsyncPushLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::PushLogResponse>> PrepareAsyncPushLog(::grpc::ClientContext* context, const ::backend::PushLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::PushLogResponse>>(PrepareAsyncPushLogRaw(context, request, cq));
    }
    virtual ::grpc::Status PulseCheck(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::backend::StorageEmpty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>> AsyncPulseCheck(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>>(AsyncPulseCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>> PrepareAsyncPulseCheck(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>>(PrepareAsyncPulseCheckRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void PushStorageTablets(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PushStorageTablets(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void KillServer(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void KillServer(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReviveServer(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReviveServer(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetKVStoreState(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest* request, ::backend::StorageGetKVStoreStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetKVStoreState(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest* request, ::backend::StorageGetKVStoreStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestLatestTabletState(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest* request, ::backend::RequestLatestTabletStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestLatestTabletState(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest* request, ::backend::RequestLatestTabletStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PushCheckpointPartition(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response, ::grpc::ClientWriteReactor< ::backend::PushCheckpointPartitionRequest>* reactor) = 0;
      virtual void PushLog(::grpc::ClientContext* context, const ::backend::PushLogRequest* request, ::backend::PushLogResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PushLog(::grpc::ClientContext* context, const ::backend::PushLogRequest* request, ::backend::PushLogResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PulseCheck(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PulseCheck(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* AsyncPushStorageTabletsRaw(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* PrepareAsyncPushStorageTabletsRaw(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* AsyncStorageGetRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* PrepareAsyncStorageGetRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* AsyncStoragePutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* PrepareAsyncStoragePutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* AsyncStorageCPutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* PrepareAsyncStorageCPutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* AsyncStorageDeleteRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* PrepareAsyncStorageDeleteRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>* AsyncKillServerRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>* PrepareAsyncKillServerRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>* AsyncReviveServerRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>* PrepareAsyncReviveServerRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageGetKVStoreStateResponse>* AsyncGetKVStoreStateRaw(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageGetKVStoreStateResponse>* PrepareAsyncGetKVStoreStateRaw(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::RequestLatestTabletStateResponse>* AsyncRequestLatestTabletStateRaw(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::RequestLatestTabletStateResponse>* PrepareAsyncRequestLatestTabletStateRaw(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::backend::PushCheckpointPartitionRequest>* PushCheckpointPartitionRaw(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::backend::PushCheckpointPartitionRequest>* AsyncPushCheckpointPartitionRaw(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::backend::PushCheckpointPartitionRequest>* PrepareAsyncPushCheckpointPartitionRaw(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::PushLogResponse>* AsyncPushLogRaw(::grpc::ClientContext* context, const ::backend::PushLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::PushLogResponse>* PrepareAsyncPushLogRaw(::grpc::ClientContext* context, const ::backend::PushLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>* AsyncPulseCheckRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageEmpty>* PrepareAsyncPulseCheckRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status PushStorageTablets(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest& request, ::backend::StorageServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> AsyncPushStorageTablets(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(AsyncPushStorageTabletsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> PrepareAsyncPushStorageTablets(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(PrepareAsyncPushStorageTabletsRaw(context, request, cq));
    }
    ::grpc::Status StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> AsyncStorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(AsyncStorageGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> PrepareAsyncStorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(PrepareAsyncStorageGetRaw(context, request, cq));
    }
    ::grpc::Status StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> AsyncStoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(AsyncStoragePutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> PrepareAsyncStoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(PrepareAsyncStoragePutRaw(context, request, cq));
    }
    ::grpc::Status StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> AsyncStorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(AsyncStorageCPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> PrepareAsyncStorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(PrepareAsyncStorageCPutRaw(context, request, cq));
    }
    ::grpc::Status StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> AsyncStorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(AsyncStorageDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> PrepareAsyncStorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(PrepareAsyncStorageDeleteRaw(context, request, cq));
    }
    ::grpc::Status KillServer(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::backend::StorageEmpty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>> AsyncKillServer(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>>(AsyncKillServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>> PrepareAsyncKillServer(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>>(PrepareAsyncKillServerRaw(context, request, cq));
    }
    ::grpc::Status ReviveServer(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::backend::StorageEmpty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>> AsyncReviveServer(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>>(AsyncReviveServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>> PrepareAsyncReviveServer(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>>(PrepareAsyncReviveServerRaw(context, request, cq));
    }
    ::grpc::Status GetKVStoreState(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest& request, ::backend::StorageGetKVStoreStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageGetKVStoreStateResponse>> AsyncGetKVStoreState(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageGetKVStoreStateResponse>>(AsyncGetKVStoreStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageGetKVStoreStateResponse>> PrepareAsyncGetKVStoreState(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageGetKVStoreStateResponse>>(PrepareAsyncGetKVStoreStateRaw(context, request, cq));
    }
    ::grpc::Status RequestLatestTabletState(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest& request, ::backend::RequestLatestTabletStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::RequestLatestTabletStateResponse>> AsyncRequestLatestTabletState(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::RequestLatestTabletStateResponse>>(AsyncRequestLatestTabletStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::RequestLatestTabletStateResponse>> PrepareAsyncRequestLatestTabletState(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::RequestLatestTabletStateResponse>>(PrepareAsyncRequestLatestTabletStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::backend::PushCheckpointPartitionRequest>> PushCheckpointPartition(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::backend::PushCheckpointPartitionRequest>>(PushCheckpointPartitionRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::backend::PushCheckpointPartitionRequest>> AsyncPushCheckpointPartition(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::backend::PushCheckpointPartitionRequest>>(AsyncPushCheckpointPartitionRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::backend::PushCheckpointPartitionRequest>> PrepareAsyncPushCheckpointPartition(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::backend::PushCheckpointPartitionRequest>>(PrepareAsyncPushCheckpointPartitionRaw(context, response, cq));
    }
    ::grpc::Status PushLog(::grpc::ClientContext* context, const ::backend::PushLogRequest& request, ::backend::PushLogResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::PushLogResponse>> AsyncPushLog(::grpc::ClientContext* context, const ::backend::PushLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::PushLogResponse>>(AsyncPushLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::PushLogResponse>> PrepareAsyncPushLog(::grpc::ClientContext* context, const ::backend::PushLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::PushLogResponse>>(PrepareAsyncPushLogRaw(context, request, cq));
    }
    ::grpc::Status PulseCheck(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::backend::StorageEmpty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>> AsyncPulseCheck(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>>(AsyncPulseCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>> PrepareAsyncPulseCheck(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>>(PrepareAsyncPulseCheckRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PushStorageTablets(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) override;
      void PushStorageTablets(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) override;
      void StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) override;
      void StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) override;
      void StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) override;
      void StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void KillServer(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, std::function<void(::grpc::Status)>) override;
      void KillServer(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReviveServer(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, std::function<void(::grpc::Status)>) override;
      void ReviveServer(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetKVStoreState(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest* request, ::backend::StorageGetKVStoreStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetKVStoreState(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest* request, ::backend::StorageGetKVStoreStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestLatestTabletState(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest* request, ::backend::RequestLatestTabletStateResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestLatestTabletState(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest* request, ::backend::RequestLatestTabletStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PushCheckpointPartition(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response, ::grpc::ClientWriteReactor< ::backend::PushCheckpointPartitionRequest>* reactor) override;
      void PushLog(::grpc::ClientContext* context, const ::backend::PushLogRequest* request, ::backend::PushLogResponse* response, std::function<void(::grpc::Status)>) override;
      void PushLog(::grpc::ClientContext* context, const ::backend::PushLogRequest* request, ::backend::PushLogResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PulseCheck(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, std::function<void(::grpc::Status)>) override;
      void PulseCheck(::grpc::ClientContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* AsyncPushStorageTabletsRaw(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* PrepareAsyncPushStorageTabletsRaw(::grpc::ClientContext* context, const ::backend::PushStorageTabletsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* AsyncStorageGetRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* PrepareAsyncStorageGetRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* AsyncStoragePutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* PrepareAsyncStoragePutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* AsyncStorageCPutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* PrepareAsyncStorageCPutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* AsyncStorageDeleteRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* PrepareAsyncStorageDeleteRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>* AsyncKillServerRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>* PrepareAsyncKillServerRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>* AsyncReviveServerRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>* PrepareAsyncReviveServerRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageGetKVStoreStateResponse>* AsyncGetKVStoreStateRaw(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageGetKVStoreStateResponse>* PrepareAsyncGetKVStoreStateRaw(::grpc::ClientContext* context, const ::backend::StorageGetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::RequestLatestTabletStateResponse>* AsyncRequestLatestTabletStateRaw(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::RequestLatestTabletStateResponse>* PrepareAsyncRequestLatestTabletStateRaw(::grpc::ClientContext* context, const ::backend::RequestLatestTabletStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::backend::PushCheckpointPartitionRequest>* PushCheckpointPartitionRaw(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response) override;
    ::grpc::ClientAsyncWriter< ::backend::PushCheckpointPartitionRequest>* AsyncPushCheckpointPartitionRaw(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::backend::PushCheckpointPartitionRequest>* PrepareAsyncPushCheckpointPartitionRaw(::grpc::ClientContext* context, ::backend::PushCheckpointPartitionResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::PushLogResponse>* AsyncPushLogRaw(::grpc::ClientContext* context, const ::backend::PushLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::PushLogResponse>* PrepareAsyncPushLogRaw(::grpc::ClientContext* context, const ::backend::PushLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>* AsyncPulseCheckRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageEmpty>* PrepareAsyncPulseCheckRaw(::grpc::ClientContext* context, const ::backend::StorageEmpty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PushStorageTablets_;
    const ::grpc::internal::RpcMethod rpcmethod_StorageGet_;
    const ::grpc::internal::RpcMethod rpcmethod_StoragePut_;
    const ::grpc::internal::RpcMethod rpcmethod_StorageCPut_;
    const ::grpc::internal::RpcMethod rpcmethod_StorageDelete_;
    const ::grpc::internal::RpcMethod rpcmethod_KillServer_;
    const ::grpc::internal::RpcMethod rpcmethod_ReviveServer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetKVStoreState_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestLatestTabletState_;
    const ::grpc::internal::RpcMethod rpcmethod_PushCheckpointPartition_;
    const ::grpc::internal::RpcMethod rpcmethod_PushLog_;
    const ::grpc::internal::RpcMethod rpcmethod_PulseCheck_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status PushStorageTablets(::grpc::ServerContext* context, const ::backend::PushStorageTabletsRequest* request, ::backend::StorageServerResponse* response);
    virtual ::grpc::Status StorageGet(::grpc::ServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response);
    virtual ::grpc::Status StoragePut(::grpc::ServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response);
    virtual ::grpc::Status StorageCPut(::grpc::ServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response);
    virtual ::grpc::Status StorageDelete(::grpc::ServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response);
    virtual ::grpc::Status KillServer(::grpc::ServerContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response);
    virtual ::grpc::Status ReviveServer(::grpc::ServerContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response);
    virtual ::grpc::Status GetKVStoreState(::grpc::ServerContext* context, const ::backend::StorageGetKVStoreStateRequest* request, ::backend::StorageGetKVStoreStateResponse* response);
    virtual ::grpc::Status RequestLatestTabletState(::grpc::ServerContext* context, const ::backend::RequestLatestTabletStateRequest* request, ::backend::RequestLatestTabletStateResponse* response);
    virtual ::grpc::Status PushCheckpointPartition(::grpc::ServerContext* context, ::grpc::ServerReader< ::backend::PushCheckpointPartitionRequest>* reader, ::backend::PushCheckpointPartitionResponse* response);
    virtual ::grpc::Status PushLog(::grpc::ServerContext* context, const ::backend::PushLogRequest* request, ::backend::PushLogResponse* response);
    virtual ::grpc::Status PulseCheck(::grpc::ServerContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PushStorageTablets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushStorageTablets() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PushStorageTablets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushStorageTablets(::grpc::ServerContext* /*context*/, const ::backend::PushStorageTabletsRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushStorageTablets(::grpc::ServerContext* context, ::backend::PushStorageTabletsRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::StorageServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StorageGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StorageGet() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StorageGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageGet(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStorageGet(::grpc::ServerContext* context, ::backend::StorageServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::StorageServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StoragePut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StoragePut() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StoragePut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoragePut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoragePut(::grpc::ServerContext* context, ::backend::StorageServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::StorageServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StorageCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StorageCPut() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StorageCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageCPut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStorageCPut(::grpc::ServerContext* context, ::backend::StorageServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::StorageServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StorageDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StorageDelete() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StorageDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageDelete(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStorageDelete(::grpc::ServerContext* context, ::backend::StorageServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::StorageServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KillServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_KillServer() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_KillServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KillServer(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKillServer(::grpc::ServerContext* context, ::backend::StorageEmpty* request, ::grpc::ServerAsyncResponseWriter< ::backend::StorageEmpty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReviveServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReviveServer() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ReviveServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReviveServer(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReviveServer(::grpc::ServerContext* context, ::backend::StorageEmpty* request, ::grpc::ServerAsyncResponseWriter< ::backend::StorageEmpty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::StorageGetKVStoreStateRequest* /*request*/, ::backend::StorageGetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKVStoreState(::grpc::ServerContext* context, ::backend::StorageGetKVStoreStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::StorageGetKVStoreStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestLatestTabletState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestLatestTabletState() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_RequestLatestTabletState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestLatestTabletState(::grpc::ServerContext* /*context*/, const ::backend::RequestLatestTabletStateRequest* /*request*/, ::backend::RequestLatestTabletStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestLatestTabletState(::grpc::ServerContext* context, ::backend::RequestLatestTabletStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::RequestLatestTabletStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushCheckpointPartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushCheckpointPartition() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_PushCheckpointPartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCheckpointPartition(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::backend::PushCheckpointPartitionRequest>* /*reader*/, ::backend::PushCheckpointPartitionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushCheckpointPartition(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::backend::PushCheckpointPartitionResponse, ::backend::PushCheckpointPartitionRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(9, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushLog() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_PushLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushLog(::grpc::ServerContext* /*context*/, const ::backend::PushLogRequest* /*request*/, ::backend::PushLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushLog(::grpc::ServerContext* context, ::backend::PushLogRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::PushLogResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PulseCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PulseCheck() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_PulseCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PulseCheck(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPulseCheck(::grpc::ServerContext* context, ::backend::StorageEmpty* request, ::grpc::ServerAsyncResponseWriter< ::backend::StorageEmpty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PushStorageTablets<WithAsyncMethod_StorageGet<WithAsyncMethod_StoragePut<WithAsyncMethod_StorageCPut<WithAsyncMethod_StorageDelete<WithAsyncMethod_KillServer<WithAsyncMethod_ReviveServer<WithAsyncMethod_GetKVStoreState<WithAsyncMethod_RequestLatestTabletState<WithAsyncMethod_PushCheckpointPartition<WithAsyncMethod_PushLog<WithAsyncMethod_PulseCheck<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PushStorageTablets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushStorageTablets() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::PushStorageTabletsRequest, ::backend::StorageServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::PushStorageTabletsRequest* request, ::backend::StorageServerResponse* response) { return this->PushStorageTablets(context, request, response); }));}
    void SetMessageAllocatorFor_PushStorageTablets(
        ::grpc::MessageAllocator< ::backend::PushStorageTabletsRequest, ::backend::StorageServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::PushStorageTabletsRequest, ::backend::StorageServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PushStorageTablets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushStorageTablets(::grpc::ServerContext* /*context*/, const ::backend::PushStorageTabletsRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushStorageTablets(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::PushStorageTabletsRequest* /*request*/, ::backend::StorageServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StorageGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StorageGet() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::StorageServerRequest, ::backend::StorageServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response) { return this->StorageGet(context, request, response); }));}
    void SetMessageAllocatorFor_StorageGet(
        ::grpc::MessageAllocator< ::backend::StorageServerRequest, ::backend::StorageServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::StorageServerRequest, ::backend::StorageServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StorageGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageGet(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StorageGet(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StoragePut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StoragePut() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::StorageServerRequest, ::backend::StorageServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response) { return this->StoragePut(context, request, response); }));}
    void SetMessageAllocatorFor_StoragePut(
        ::grpc::MessageAllocator< ::backend::StorageServerRequest, ::backend::StorageServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::StorageServerRequest, ::backend::StorageServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StoragePut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoragePut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StoragePut(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StorageCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StorageCPut() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::StorageServerRequest, ::backend::StorageServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response) { return this->StorageCPut(context, request, response); }));}
    void SetMessageAllocatorFor_StorageCPut(
        ::grpc::MessageAllocator< ::backend::StorageServerRequest, ::backend::StorageServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::StorageServerRequest, ::backend::StorageServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StorageCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageCPut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StorageCPut(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StorageDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StorageDelete() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::StorageServerRequest, ::backend::StorageServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response) { return this->StorageDelete(context, request, response); }));}
    void SetMessageAllocatorFor_StorageDelete(
        ::grpc::MessageAllocator< ::backend::StorageServerRequest, ::backend::StorageServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::StorageServerRequest, ::backend::StorageServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StorageDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageDelete(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StorageDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_KillServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_KillServer() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::StorageEmpty, ::backend::StorageEmpty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response) { return this->KillServer(context, request, response); }));}
    void SetMessageAllocatorFor_KillServer(
        ::grpc::MessageAllocator< ::backend::StorageEmpty, ::backend::StorageEmpty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::StorageEmpty, ::backend::StorageEmpty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_KillServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KillServer(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* KillServer(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReviveServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReviveServer() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::StorageEmpty, ::backend::StorageEmpty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response) { return this->ReviveServer(context, request, response); }));}
    void SetMessageAllocatorFor_ReviveServer(
        ::grpc::MessageAllocator< ::backend::StorageEmpty, ::backend::StorageEmpty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::StorageEmpty, ::backend::StorageEmpty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReviveServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReviveServer(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReviveServer(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::StorageGetKVStoreStateRequest, ::backend::StorageGetKVStoreStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::StorageGetKVStoreStateRequest* request, ::backend::StorageGetKVStoreStateResponse* response) { return this->GetKVStoreState(context, request, response); }));}
    void SetMessageAllocatorFor_GetKVStoreState(
        ::grpc::MessageAllocator< ::backend::StorageGetKVStoreStateRequest, ::backend::StorageGetKVStoreStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::StorageGetKVStoreStateRequest, ::backend::StorageGetKVStoreStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::StorageGetKVStoreStateRequest* /*request*/, ::backend::StorageGetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetKVStoreState(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::StorageGetKVStoreStateRequest* /*request*/, ::backend::StorageGetKVStoreStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestLatestTabletState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestLatestTabletState() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::RequestLatestTabletStateRequest, ::backend::RequestLatestTabletStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::RequestLatestTabletStateRequest* request, ::backend::RequestLatestTabletStateResponse* response) { return this->RequestLatestTabletState(context, request, response); }));}
    void SetMessageAllocatorFor_RequestLatestTabletState(
        ::grpc::MessageAllocator< ::backend::RequestLatestTabletStateRequest, ::backend::RequestLatestTabletStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::RequestLatestTabletStateRequest, ::backend::RequestLatestTabletStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestLatestTabletState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestLatestTabletState(::grpc::ServerContext* /*context*/, const ::backend::RequestLatestTabletStateRequest* /*request*/, ::backend::RequestLatestTabletStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestLatestTabletState(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::RequestLatestTabletStateRequest* /*request*/, ::backend::RequestLatestTabletStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PushCheckpointPartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushCheckpointPartition() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackClientStreamingHandler< ::backend::PushCheckpointPartitionRequest, ::backend::PushCheckpointPartitionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::backend::PushCheckpointPartitionResponse* response) { return this->PushCheckpointPartition(context, response); }));
    }
    ~WithCallbackMethod_PushCheckpointPartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCheckpointPartition(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::backend::PushCheckpointPartitionRequest>* /*reader*/, ::backend::PushCheckpointPartitionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::backend::PushCheckpointPartitionRequest>* PushCheckpointPartition(
      ::grpc::CallbackServerContext* /*context*/, ::backend::PushCheckpointPartitionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PushLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushLog() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::PushLogRequest, ::backend::PushLogResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::PushLogRequest* request, ::backend::PushLogResponse* response) { return this->PushLog(context, request, response); }));}
    void SetMessageAllocatorFor_PushLog(
        ::grpc::MessageAllocator< ::backend::PushLogRequest, ::backend::PushLogResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::PushLogRequest, ::backend::PushLogResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PushLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushLog(::grpc::ServerContext* /*context*/, const ::backend::PushLogRequest* /*request*/, ::backend::PushLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushLog(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::PushLogRequest* /*request*/, ::backend::PushLogResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PulseCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PulseCheck() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::StorageEmpty, ::backend::StorageEmpty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::StorageEmpty* request, ::backend::StorageEmpty* response) { return this->PulseCheck(context, request, response); }));}
    void SetMessageAllocatorFor_PulseCheck(
        ::grpc::MessageAllocator< ::backend::StorageEmpty, ::backend::StorageEmpty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::StorageEmpty, ::backend::StorageEmpty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PulseCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PulseCheck(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PulseCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_PushStorageTablets<WithCallbackMethod_StorageGet<WithCallbackMethod_StoragePut<WithCallbackMethod_StorageCPut<WithCallbackMethod_StorageDelete<WithCallbackMethod_KillServer<WithCallbackMethod_ReviveServer<WithCallbackMethod_GetKVStoreState<WithCallbackMethod_RequestLatestTabletState<WithCallbackMethod_PushCheckpointPartition<WithCallbackMethod_PushLog<WithCallbackMethod_PulseCheck<Service > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PushStorageTablets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushStorageTablets() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PushStorageTablets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushStorageTablets(::grpc::ServerContext* /*context*/, const ::backend::PushStorageTabletsRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StorageGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StorageGet() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StorageGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageGet(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StoragePut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StoragePut() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StoragePut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoragePut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StorageCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StorageCPut() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StorageCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageCPut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StorageDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StorageDelete() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StorageDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageDelete(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KillServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_KillServer() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_KillServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KillServer(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReviveServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReviveServer() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ReviveServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReviveServer(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::StorageGetKVStoreStateRequest* /*request*/, ::backend::StorageGetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestLatestTabletState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestLatestTabletState() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_RequestLatestTabletState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestLatestTabletState(::grpc::ServerContext* /*context*/, const ::backend::RequestLatestTabletStateRequest* /*request*/, ::backend::RequestLatestTabletStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushCheckpointPartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushCheckpointPartition() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_PushCheckpointPartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCheckpointPartition(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::backend::PushCheckpointPartitionRequest>* /*reader*/, ::backend::PushCheckpointPartitionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushLog() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_PushLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushLog(::grpc::ServerContext* /*context*/, const ::backend::PushLogRequest* /*request*/, ::backend::PushLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PulseCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PulseCheck() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_PulseCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PulseCheck(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushStorageTablets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushStorageTablets() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PushStorageTablets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushStorageTablets(::grpc::ServerContext* /*context*/, const ::backend::PushStorageTabletsRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushStorageTablets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StorageGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StorageGet() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StorageGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageGet(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStorageGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StoragePut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StoragePut() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StoragePut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoragePut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoragePut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StorageCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StorageCPut() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_StorageCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageCPut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStorageCPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StorageDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StorageDelete() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_StorageDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageDelete(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStorageDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KillServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_KillServer() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_KillServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KillServer(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKillServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReviveServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReviveServer() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ReviveServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReviveServer(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReviveServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::StorageGetKVStoreStateRequest* /*request*/, ::backend::StorageGetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKVStoreState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestLatestTabletState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestLatestTabletState() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_RequestLatestTabletState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestLatestTabletState(::grpc::ServerContext* /*context*/, const ::backend::RequestLatestTabletStateRequest* /*request*/, ::backend::RequestLatestTabletStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestLatestTabletState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushCheckpointPartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushCheckpointPartition() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_PushCheckpointPartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCheckpointPartition(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::backend::PushCheckpointPartitionRequest>* /*reader*/, ::backend::PushCheckpointPartitionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushCheckpointPartition(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(9, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushLog() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_PushLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushLog(::grpc::ServerContext* /*context*/, const ::backend::PushLogRequest* /*request*/, ::backend::PushLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PulseCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PulseCheck() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_PulseCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PulseCheck(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPulseCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushStorageTablets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushStorageTablets() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushStorageTablets(context, request, response); }));
    }
    ~WithRawCallbackMethod_PushStorageTablets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushStorageTablets(::grpc::ServerContext* /*context*/, const ::backend::PushStorageTabletsRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushStorageTablets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StorageGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StorageGet() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StorageGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_StorageGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageGet(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StorageGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StoragePut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StoragePut() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StoragePut(context, request, response); }));
    }
    ~WithRawCallbackMethod_StoragePut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoragePut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StoragePut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StorageCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StorageCPut() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StorageCPut(context, request, response); }));
    }
    ~WithRawCallbackMethod_StorageCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageCPut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StorageCPut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StorageDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StorageDelete() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StorageDelete(context, request, response); }));
    }
    ~WithRawCallbackMethod_StorageDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageDelete(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StorageDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_KillServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_KillServer() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->KillServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_KillServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KillServer(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* KillServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReviveServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReviveServer() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReviveServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReviveServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReviveServer(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReviveServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetKVStoreState(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::StorageGetKVStoreStateRequest* /*request*/, ::backend::StorageGetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetKVStoreState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestLatestTabletState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestLatestTabletState() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestLatestTabletState(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestLatestTabletState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestLatestTabletState(::grpc::ServerContext* /*context*/, const ::backend::RequestLatestTabletStateRequest* /*request*/, ::backend::RequestLatestTabletStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestLatestTabletState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushCheckpointPartition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushCheckpointPartition() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->PushCheckpointPartition(context, response); }));
    }
    ~WithRawCallbackMethod_PushCheckpointPartition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushCheckpointPartition(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::backend::PushCheckpointPartitionRequest>* /*reader*/, ::backend::PushCheckpointPartitionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* PushCheckpointPartition(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushLog() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushLog(context, request, response); }));
    }
    ~WithRawCallbackMethod_PushLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushLog(::grpc::ServerContext* /*context*/, const ::backend::PushLogRequest* /*request*/, ::backend::PushLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PushLog(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PulseCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PulseCheck() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PulseCheck(context, request, response); }));
    }
    ~WithRawCallbackMethod_PulseCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PulseCheck(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PulseCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushStorageTablets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushStorageTablets() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::PushStorageTabletsRequest, ::backend::StorageServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::PushStorageTabletsRequest, ::backend::StorageServerResponse>* streamer) {
                       return this->StreamedPushStorageTablets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushStorageTablets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushStorageTablets(::grpc::ServerContext* /*context*/, const ::backend::PushStorageTabletsRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushStorageTablets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::PushStorageTabletsRequest,::backend::StorageServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StorageGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StorageGet() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::StorageServerRequest, ::backend::StorageServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::StorageServerRequest, ::backend::StorageServerResponse>* streamer) {
                       return this->StreamedStorageGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StorageGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StorageGet(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStorageGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::StorageServerRequest,::backend::StorageServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StoragePut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StoragePut() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::StorageServerRequest, ::backend::StorageServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::StorageServerRequest, ::backend::StorageServerResponse>* streamer) {
                       return this->StreamedStoragePut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StoragePut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StoragePut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStoragePut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::StorageServerRequest,::backend::StorageServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StorageCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StorageCPut() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::StorageServerRequest, ::backend::StorageServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::StorageServerRequest, ::backend::StorageServerResponse>* streamer) {
                       return this->StreamedStorageCPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StorageCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StorageCPut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStorageCPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::StorageServerRequest,::backend::StorageServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StorageDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StorageDelete() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::StorageServerRequest, ::backend::StorageServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::StorageServerRequest, ::backend::StorageServerResponse>* streamer) {
                       return this->StreamedStorageDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StorageDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StorageDelete(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStorageDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::StorageServerRequest,::backend::StorageServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KillServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_KillServer() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::StorageEmpty, ::backend::StorageEmpty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::StorageEmpty, ::backend::StorageEmpty>* streamer) {
                       return this->StreamedKillServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_KillServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KillServer(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKillServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::StorageEmpty,::backend::StorageEmpty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReviveServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReviveServer() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::StorageEmpty, ::backend::StorageEmpty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::StorageEmpty, ::backend::StorageEmpty>* streamer) {
                       return this->StreamedReviveServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReviveServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReviveServer(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReviveServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::StorageEmpty,::backend::StorageEmpty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::StorageGetKVStoreStateRequest, ::backend::StorageGetKVStoreStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::StorageGetKVStoreStateRequest, ::backend::StorageGetKVStoreStateResponse>* streamer) {
                       return this->StreamedGetKVStoreState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::StorageGetKVStoreStateRequest* /*request*/, ::backend::StorageGetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetKVStoreState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::StorageGetKVStoreStateRequest,::backend::StorageGetKVStoreStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestLatestTabletState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestLatestTabletState() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::RequestLatestTabletStateRequest, ::backend::RequestLatestTabletStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::RequestLatestTabletStateRequest, ::backend::RequestLatestTabletStateResponse>* streamer) {
                       return this->StreamedRequestLatestTabletState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestLatestTabletState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestLatestTabletState(::grpc::ServerContext* /*context*/, const ::backend::RequestLatestTabletStateRequest* /*request*/, ::backend::RequestLatestTabletStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestLatestTabletState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::RequestLatestTabletStateRequest,::backend::RequestLatestTabletStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushLog() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::PushLogRequest, ::backend::PushLogResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::PushLogRequest, ::backend::PushLogResponse>* streamer) {
                       return this->StreamedPushLog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushLog(::grpc::ServerContext* /*context*/, const ::backend::PushLogRequest* /*request*/, ::backend::PushLogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::PushLogRequest,::backend::PushLogResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PulseCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PulseCheck() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::StorageEmpty, ::backend::StorageEmpty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::StorageEmpty, ::backend::StorageEmpty>* streamer) {
                       return this->StreamedPulseCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PulseCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PulseCheck(::grpc::ServerContext* /*context*/, const ::backend::StorageEmpty* /*request*/, ::backend::StorageEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPulseCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::StorageEmpty,::backend::StorageEmpty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PushStorageTablets<WithStreamedUnaryMethod_StorageGet<WithStreamedUnaryMethod_StoragePut<WithStreamedUnaryMethod_StorageCPut<WithStreamedUnaryMethod_StorageDelete<WithStreamedUnaryMethod_KillServer<WithStreamedUnaryMethod_ReviveServer<WithStreamedUnaryMethod_GetKVStoreState<WithStreamedUnaryMethod_RequestLatestTabletState<WithStreamedUnaryMethod_PushLog<WithStreamedUnaryMethod_PulseCheck<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PushStorageTablets<WithStreamedUnaryMethod_StorageGet<WithStreamedUnaryMethod_StoragePut<WithStreamedUnaryMethod_StorageCPut<WithStreamedUnaryMethod_StorageDelete<WithStreamedUnaryMethod_KillServer<WithStreamedUnaryMethod_ReviveServer<WithStreamedUnaryMethod_GetKVStoreState<WithStreamedUnaryMethod_RequestLatestTabletState<WithStreamedUnaryMethod_PushLog<WithStreamedUnaryMethod_PulseCheck<Service > > > > > > > > > > > StreamedService;
};

}  // namespace backend


#endif  // GRPC_storageserver_2eproto__INCLUDED
