// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: masterserver.proto
#ifndef GRPC_masterserver_2eproto__INCLUDED
#define GRPC_masterserver_2eproto__INCLUDED

#include "masterserver.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace backend {

class MasterServer final {
 public:
  static constexpr char const* service_full_name() {
    return "backend.MasterServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::backend::GetTabletsUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsUserResponse>> AsyncGetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsUserResponse>>(AsyncGetTabletsForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsUserResponse>> PrepareAsyncGetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsUserResponse>>(PrepareAsyncGetTabletsForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::backend::MasterEmpty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>> AsyncGetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>>(AsyncGetTabletsForServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>> PrepareAsyncGetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>>(PrepareAsyncGetTabletsForServerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetKVStoreState(::grpc::ClientContext* context, const ::backend::MasterEmpty& request, ::backend::MasterGetKVStoreStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterGetKVStoreStateResponse>> AsyncGetKVStoreState(::grpc::ClientContext* context, const ::backend::MasterEmpty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterGetKVStoreStateResponse>>(AsyncGetKVStoreStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterGetKVStoreStateResponse>> PrepareAsyncGetKVStoreState(::grpc::ClientContext* context, const ::backend::MasterEmpty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterGetKVStoreStateResponse>>(PrepareAsyncGetKVStoreStateRaw(context, request, cq));
    }
    virtual ::grpc::Status KillStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::backend::MasterEmpty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>> AsyncKillStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>>(AsyncKillStorageServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>> PrepareAsyncKillStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>>(PrepareAsyncKillStorageServerRaw(context, request, cq));
    }
    virtual ::grpc::Status ReviveStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::backend::MasterEmpty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>> AsyncReviveStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>>(AsyncReviveStorageServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>> PrepareAsyncReviveStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>>(PrepareAsyncReviveStorageServerRaw(context, request, cq));
    }
    virtual ::grpc::Status IsInitialStorageServerStartup(::grpc::ClientContext* context, const ::backend::IsInitialStorageServerStartupRequest& request, ::backend::IsInitialStorageServerStartupResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::IsInitialStorageServerStartupResponse>> AsyncIsInitialStorageServerStartup(::grpc::ClientContext* context, const ::backend::IsInitialStorageServerStartupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::IsInitialStorageServerStartupResponse>>(AsyncIsInitialStorageServerStartupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::IsInitialStorageServerStartupResponse>> PrepareAsyncIsInitialStorageServerStartup(::grpc::ClientContext* context, const ::backend::IsInitialStorageServerStartupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::IsInitialStorageServerStartupResponse>>(PrepareAsyncIsInitialStorageServerStartupRaw(context, request, cq));
    }
    virtual ::grpc::Status GetStorageServerStatuses(::grpc::ClientContext* context, const ::backend::GetStorageServerStatusesRequest& request, ::backend::GetStorageServerStatusesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetStorageServerStatusesResponse>> AsyncGetStorageServerStatuses(::grpc::ClientContext* context, const ::backend::GetStorageServerStatusesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetStorageServerStatusesResponse>>(AsyncGetStorageServerStatusesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetStorageServerStatusesResponse>> PrepareAsyncGetStorageServerStatuses(::grpc::ClientContext* context, const ::backend::GetStorageServerStatusesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetStorageServerStatusesResponse>>(PrepareAsyncGetStorageServerStatusesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest* request, ::backend::GetTabletsUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest* request, ::backend::GetTabletsUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest* request, ::backend::MasterEmpty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest* request, ::backend::MasterEmpty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetKVStoreState(::grpc::ClientContext* context, const ::backend::MasterEmpty* request, ::backend::MasterGetKVStoreStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetKVStoreState(::grpc::ClientContext* context, const ::backend::MasterEmpty* request, ::backend::MasterGetKVStoreStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void KillStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest* request, ::backend::MasterEmpty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void KillStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest* request, ::backend::MasterEmpty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReviveStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest* request, ::backend::MasterEmpty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReviveStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest* request, ::backend::MasterEmpty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void IsInitialStorageServerStartup(::grpc::ClientContext* context, const ::backend::IsInitialStorageServerStartupRequest* request, ::backend::IsInitialStorageServerStartupResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsInitialStorageServerStartup(::grpc::ClientContext* context, const ::backend::IsInitialStorageServerStartupRequest* request, ::backend::IsInitialStorageServerStartupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetStorageServerStatuses(::grpc::ClientContext* context, const ::backend::GetStorageServerStatusesRequest* request, ::backend::GetStorageServerStatusesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStorageServerStatuses(::grpc::ClientContext* context, const ::backend::GetStorageServerStatusesRequest* request, ::backend::GetStorageServerStatusesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsUserResponse>* AsyncGetTabletsForUserRaw(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsUserResponse>* PrepareAsyncGetTabletsForUserRaw(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>* AsyncGetTabletsForServerRaw(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>* PrepareAsyncGetTabletsForServerRaw(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterGetKVStoreStateResponse>* AsyncGetKVStoreStateRaw(::grpc::ClientContext* context, const ::backend::MasterEmpty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterGetKVStoreStateResponse>* PrepareAsyncGetKVStoreStateRaw(::grpc::ClientContext* context, const ::backend::MasterEmpty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>* AsyncKillStorageServerRaw(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>* PrepareAsyncKillStorageServerRaw(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>* AsyncReviveStorageServerRaw(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::MasterEmpty>* PrepareAsyncReviveStorageServerRaw(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::IsInitialStorageServerStartupResponse>* AsyncIsInitialStorageServerStartupRaw(::grpc::ClientContext* context, const ::backend::IsInitialStorageServerStartupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::IsInitialStorageServerStartupResponse>* PrepareAsyncIsInitialStorageServerStartupRaw(::grpc::ClientContext* context, const ::backend::IsInitialStorageServerStartupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetStorageServerStatusesResponse>* AsyncGetStorageServerStatusesRaw(::grpc::ClientContext* context, const ::backend::GetStorageServerStatusesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetStorageServerStatusesResponse>* PrepareAsyncGetStorageServerStatusesRaw(::grpc::ClientContext* context, const ::backend::GetStorageServerStatusesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::backend::GetTabletsUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsUserResponse>> AsyncGetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsUserResponse>>(AsyncGetTabletsForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsUserResponse>> PrepareAsyncGetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsUserResponse>>(PrepareAsyncGetTabletsForUserRaw(context, request, cq));
    }
    ::grpc::Status GetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::backend::MasterEmpty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>> AsyncGetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>>(AsyncGetTabletsForServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>> PrepareAsyncGetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>>(PrepareAsyncGetTabletsForServerRaw(context, request, cq));
    }
    ::grpc::Status GetKVStoreState(::grpc::ClientContext* context, const ::backend::MasterEmpty& request, ::backend::MasterGetKVStoreStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::MasterGetKVStoreStateResponse>> AsyncGetKVStoreState(::grpc::ClientContext* context, const ::backend::MasterEmpty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::MasterGetKVStoreStateResponse>>(AsyncGetKVStoreStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::MasterGetKVStoreStateResponse>> PrepareAsyncGetKVStoreState(::grpc::ClientContext* context, const ::backend::MasterEmpty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::MasterGetKVStoreStateResponse>>(PrepareAsyncGetKVStoreStateRaw(context, request, cq));
    }
    ::grpc::Status KillStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::backend::MasterEmpty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>> AsyncKillStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>>(AsyncKillStorageServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>> PrepareAsyncKillStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>>(PrepareAsyncKillStorageServerRaw(context, request, cq));
    }
    ::grpc::Status ReviveStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::backend::MasterEmpty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>> AsyncReviveStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>>(AsyncReviveStorageServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>> PrepareAsyncReviveStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>>(PrepareAsyncReviveStorageServerRaw(context, request, cq));
    }
    ::grpc::Status IsInitialStorageServerStartup(::grpc::ClientContext* context, const ::backend::IsInitialStorageServerStartupRequest& request, ::backend::IsInitialStorageServerStartupResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::IsInitialStorageServerStartupResponse>> AsyncIsInitialStorageServerStartup(::grpc::ClientContext* context, const ::backend::IsInitialStorageServerStartupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::IsInitialStorageServerStartupResponse>>(AsyncIsInitialStorageServerStartupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::IsInitialStorageServerStartupResponse>> PrepareAsyncIsInitialStorageServerStartup(::grpc::ClientContext* context, const ::backend::IsInitialStorageServerStartupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::IsInitialStorageServerStartupResponse>>(PrepareAsyncIsInitialStorageServerStartupRaw(context, request, cq));
    }
    ::grpc::Status GetStorageServerStatuses(::grpc::ClientContext* context, const ::backend::GetStorageServerStatusesRequest& request, ::backend::GetStorageServerStatusesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetStorageServerStatusesResponse>> AsyncGetStorageServerStatuses(::grpc::ClientContext* context, const ::backend::GetStorageServerStatusesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetStorageServerStatusesResponse>>(AsyncGetStorageServerStatusesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetStorageServerStatusesResponse>> PrepareAsyncGetStorageServerStatuses(::grpc::ClientContext* context, const ::backend::GetStorageServerStatusesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetStorageServerStatusesResponse>>(PrepareAsyncGetStorageServerStatusesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest* request, ::backend::GetTabletsUserResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest* request, ::backend::GetTabletsUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest* request, ::backend::MasterEmpty* response, std::function<void(::grpc::Status)>) override;
      void GetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest* request, ::backend::MasterEmpty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetKVStoreState(::grpc::ClientContext* context, const ::backend::MasterEmpty* request, ::backend::MasterGetKVStoreStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetKVStoreState(::grpc::ClientContext* context, const ::backend::MasterEmpty* request, ::backend::MasterGetKVStoreStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void KillStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest* request, ::backend::MasterEmpty* response, std::function<void(::grpc::Status)>) override;
      void KillStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest* request, ::backend::MasterEmpty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReviveStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest* request, ::backend::MasterEmpty* response, std::function<void(::grpc::Status)>) override;
      void ReviveStorageServer(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest* request, ::backend::MasterEmpty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IsInitialStorageServerStartup(::grpc::ClientContext* context, const ::backend::IsInitialStorageServerStartupRequest* request, ::backend::IsInitialStorageServerStartupResponse* response, std::function<void(::grpc::Status)>) override;
      void IsInitialStorageServerStartup(::grpc::ClientContext* context, const ::backend::IsInitialStorageServerStartupRequest* request, ::backend::IsInitialStorageServerStartupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetStorageServerStatuses(::grpc::ClientContext* context, const ::backend::GetStorageServerStatusesRequest* request, ::backend::GetStorageServerStatusesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetStorageServerStatuses(::grpc::ClientContext* context, const ::backend::GetStorageServerStatusesRequest* request, ::backend::GetStorageServerStatusesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsUserResponse>* AsyncGetTabletsForUserRaw(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsUserResponse>* PrepareAsyncGetTabletsForUserRaw(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>* AsyncGetTabletsForServerRaw(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>* PrepareAsyncGetTabletsForServerRaw(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::MasterGetKVStoreStateResponse>* AsyncGetKVStoreStateRaw(::grpc::ClientContext* context, const ::backend::MasterEmpty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::MasterGetKVStoreStateResponse>* PrepareAsyncGetKVStoreStateRaw(::grpc::ClientContext* context, const ::backend::MasterEmpty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>* AsyncKillStorageServerRaw(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>* PrepareAsyncKillStorageServerRaw(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>* AsyncReviveStorageServerRaw(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::MasterEmpty>* PrepareAsyncReviveStorageServerRaw(::grpc::ClientContext* context, const ::backend::KillStorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::IsInitialStorageServerStartupResponse>* AsyncIsInitialStorageServerStartupRaw(::grpc::ClientContext* context, const ::backend::IsInitialStorageServerStartupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::IsInitialStorageServerStartupResponse>* PrepareAsyncIsInitialStorageServerStartupRaw(::grpc::ClientContext* context, const ::backend::IsInitialStorageServerStartupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::GetStorageServerStatusesResponse>* AsyncGetStorageServerStatusesRaw(::grpc::ClientContext* context, const ::backend::GetStorageServerStatusesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::GetStorageServerStatusesResponse>* PrepareAsyncGetStorageServerStatusesRaw(::grpc::ClientContext* context, const ::backend::GetStorageServerStatusesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetTabletsForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTabletsForServer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetKVStoreState_;
    const ::grpc::internal::RpcMethod rpcmethod_KillStorageServer_;
    const ::grpc::internal::RpcMethod rpcmethod_ReviveStorageServer_;
    const ::grpc::internal::RpcMethod rpcmethod_IsInitialStorageServerStartup_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStorageServerStatuses_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetTabletsForUser(::grpc::ServerContext* context, const ::backend::GetTabletsUserRequest* request, ::backend::GetTabletsUserResponse* response);
    virtual ::grpc::Status GetTabletsForServer(::grpc::ServerContext* context, const ::backend::GetTabletsServerRequest* request, ::backend::MasterEmpty* response);
    virtual ::grpc::Status GetKVStoreState(::grpc::ServerContext* context, const ::backend::MasterEmpty* request, ::backend::MasterGetKVStoreStateResponse* response);
    virtual ::grpc::Status KillStorageServer(::grpc::ServerContext* context, const ::backend::KillStorageServerRequest* request, ::backend::MasterEmpty* response);
    virtual ::grpc::Status ReviveStorageServer(::grpc::ServerContext* context, const ::backend::KillStorageServerRequest* request, ::backend::MasterEmpty* response);
    virtual ::grpc::Status IsInitialStorageServerStartup(::grpc::ServerContext* context, const ::backend::IsInitialStorageServerStartupRequest* request, ::backend::IsInitialStorageServerStartupResponse* response);
    virtual ::grpc::Status GetStorageServerStatuses(::grpc::ServerContext* context, const ::backend::GetStorageServerStatusesRequest* request, ::backend::GetStorageServerStatusesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTabletsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTabletsForUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetTabletsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForUser(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsUserRequest* /*request*/, ::backend::GetTabletsUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTabletsForUser(::grpc::ServerContext* context, ::backend::GetTabletsUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::GetTabletsUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTabletsForServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTabletsForServer() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetTabletsForServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForServer(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTabletsForServer(::grpc::ServerContext* context, ::backend::GetTabletsServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::MasterEmpty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::MasterEmpty* /*request*/, ::backend::MasterGetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKVStoreState(::grpc::ServerContext* context, ::backend::MasterEmpty* request, ::grpc::ServerAsyncResponseWriter< ::backend::MasterGetKVStoreStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_KillStorageServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_KillStorageServer() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_KillStorageServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KillStorageServer(::grpc::ServerContext* /*context*/, const ::backend::KillStorageServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKillStorageServer(::grpc::ServerContext* context, ::backend::KillStorageServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::MasterEmpty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReviveStorageServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReviveStorageServer() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ReviveStorageServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReviveStorageServer(::grpc::ServerContext* /*context*/, const ::backend::KillStorageServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReviveStorageServer(::grpc::ServerContext* context, ::backend::KillStorageServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::MasterEmpty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsInitialStorageServerStartup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsInitialStorageServerStartup() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_IsInitialStorageServerStartup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsInitialStorageServerStartup(::grpc::ServerContext* /*context*/, const ::backend::IsInitialStorageServerStartupRequest* /*request*/, ::backend::IsInitialStorageServerStartupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsInitialStorageServerStartup(::grpc::ServerContext* context, ::backend::IsInitialStorageServerStartupRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::IsInitialStorageServerStartupResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStorageServerStatuses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStorageServerStatuses() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetStorageServerStatuses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStorageServerStatuses(::grpc::ServerContext* /*context*/, const ::backend::GetStorageServerStatusesRequest* /*request*/, ::backend::GetStorageServerStatusesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStorageServerStatuses(::grpc::ServerContext* context, ::backend::GetStorageServerStatusesRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::GetStorageServerStatusesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetTabletsForUser<WithAsyncMethod_GetTabletsForServer<WithAsyncMethod_GetKVStoreState<WithAsyncMethod_KillStorageServer<WithAsyncMethod_ReviveStorageServer<WithAsyncMethod_IsInitialStorageServerStartup<WithAsyncMethod_GetStorageServerStatuses<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetTabletsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTabletsForUser() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::GetTabletsUserRequest, ::backend::GetTabletsUserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::GetTabletsUserRequest* request, ::backend::GetTabletsUserResponse* response) { return this->GetTabletsForUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetTabletsForUser(
        ::grpc::MessageAllocator< ::backend::GetTabletsUserRequest, ::backend::GetTabletsUserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::GetTabletsUserRequest, ::backend::GetTabletsUserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTabletsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForUser(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsUserRequest* /*request*/, ::backend::GetTabletsUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTabletsForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::GetTabletsUserRequest* /*request*/, ::backend::GetTabletsUserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTabletsForServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTabletsForServer() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::GetTabletsServerRequest, ::backend::MasterEmpty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::GetTabletsServerRequest* request, ::backend::MasterEmpty* response) { return this->GetTabletsForServer(context, request, response); }));}
    void SetMessageAllocatorFor_GetTabletsForServer(
        ::grpc::MessageAllocator< ::backend::GetTabletsServerRequest, ::backend::MasterEmpty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::GetTabletsServerRequest, ::backend::MasterEmpty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTabletsForServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForServer(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTabletsForServer(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::GetTabletsServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::MasterEmpty, ::backend::MasterGetKVStoreStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::MasterEmpty* request, ::backend::MasterGetKVStoreStateResponse* response) { return this->GetKVStoreState(context, request, response); }));}
    void SetMessageAllocatorFor_GetKVStoreState(
        ::grpc::MessageAllocator< ::backend::MasterEmpty, ::backend::MasterGetKVStoreStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::MasterEmpty, ::backend::MasterGetKVStoreStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::MasterEmpty* /*request*/, ::backend::MasterGetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetKVStoreState(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::MasterEmpty* /*request*/, ::backend::MasterGetKVStoreStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_KillStorageServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_KillStorageServer() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::KillStorageServerRequest, ::backend::MasterEmpty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::KillStorageServerRequest* request, ::backend::MasterEmpty* response) { return this->KillStorageServer(context, request, response); }));}
    void SetMessageAllocatorFor_KillStorageServer(
        ::grpc::MessageAllocator< ::backend::KillStorageServerRequest, ::backend::MasterEmpty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::KillStorageServerRequest, ::backend::MasterEmpty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_KillStorageServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KillStorageServer(::grpc::ServerContext* /*context*/, const ::backend::KillStorageServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* KillStorageServer(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::KillStorageServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReviveStorageServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReviveStorageServer() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::KillStorageServerRequest, ::backend::MasterEmpty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::KillStorageServerRequest* request, ::backend::MasterEmpty* response) { return this->ReviveStorageServer(context, request, response); }));}
    void SetMessageAllocatorFor_ReviveStorageServer(
        ::grpc::MessageAllocator< ::backend::KillStorageServerRequest, ::backend::MasterEmpty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::KillStorageServerRequest, ::backend::MasterEmpty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReviveStorageServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReviveStorageServer(::grpc::ServerContext* /*context*/, const ::backend::KillStorageServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReviveStorageServer(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::KillStorageServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsInitialStorageServerStartup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsInitialStorageServerStartup() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::IsInitialStorageServerStartupRequest, ::backend::IsInitialStorageServerStartupResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::IsInitialStorageServerStartupRequest* request, ::backend::IsInitialStorageServerStartupResponse* response) { return this->IsInitialStorageServerStartup(context, request, response); }));}
    void SetMessageAllocatorFor_IsInitialStorageServerStartup(
        ::grpc::MessageAllocator< ::backend::IsInitialStorageServerStartupRequest, ::backend::IsInitialStorageServerStartupResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::IsInitialStorageServerStartupRequest, ::backend::IsInitialStorageServerStartupResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsInitialStorageServerStartup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsInitialStorageServerStartup(::grpc::ServerContext* /*context*/, const ::backend::IsInitialStorageServerStartupRequest* /*request*/, ::backend::IsInitialStorageServerStartupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsInitialStorageServerStartup(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::IsInitialStorageServerStartupRequest* /*request*/, ::backend::IsInitialStorageServerStartupResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetStorageServerStatuses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStorageServerStatuses() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::GetStorageServerStatusesRequest, ::backend::GetStorageServerStatusesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::GetStorageServerStatusesRequest* request, ::backend::GetStorageServerStatusesResponse* response) { return this->GetStorageServerStatuses(context, request, response); }));}
    void SetMessageAllocatorFor_GetStorageServerStatuses(
        ::grpc::MessageAllocator< ::backend::GetStorageServerStatusesRequest, ::backend::GetStorageServerStatusesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::GetStorageServerStatusesRequest, ::backend::GetStorageServerStatusesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetStorageServerStatuses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStorageServerStatuses(::grpc::ServerContext* /*context*/, const ::backend::GetStorageServerStatusesRequest* /*request*/, ::backend::GetStorageServerStatusesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStorageServerStatuses(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::GetStorageServerStatusesRequest* /*request*/, ::backend::GetStorageServerStatusesResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetTabletsForUser<WithCallbackMethod_GetTabletsForServer<WithCallbackMethod_GetKVStoreState<WithCallbackMethod_KillStorageServer<WithCallbackMethod_ReviveStorageServer<WithCallbackMethod_IsInitialStorageServerStartup<WithCallbackMethod_GetStorageServerStatuses<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetTabletsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTabletsForUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetTabletsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForUser(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsUserRequest* /*request*/, ::backend::GetTabletsUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTabletsForServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTabletsForServer() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetTabletsForServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForServer(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::MasterEmpty* /*request*/, ::backend::MasterGetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_KillStorageServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_KillStorageServer() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_KillStorageServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KillStorageServer(::grpc::ServerContext* /*context*/, const ::backend::KillStorageServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReviveStorageServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReviveStorageServer() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ReviveStorageServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReviveStorageServer(::grpc::ServerContext* /*context*/, const ::backend::KillStorageServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsInitialStorageServerStartup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsInitialStorageServerStartup() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_IsInitialStorageServerStartup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsInitialStorageServerStartup(::grpc::ServerContext* /*context*/, const ::backend::IsInitialStorageServerStartupRequest* /*request*/, ::backend::IsInitialStorageServerStartupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStorageServerStatuses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStorageServerStatuses() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetStorageServerStatuses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStorageServerStatuses(::grpc::ServerContext* /*context*/, const ::backend::GetStorageServerStatusesRequest* /*request*/, ::backend::GetStorageServerStatusesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTabletsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTabletsForUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetTabletsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForUser(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsUserRequest* /*request*/, ::backend::GetTabletsUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTabletsForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTabletsForServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTabletsForServer() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetTabletsForServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForServer(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTabletsForServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::MasterEmpty* /*request*/, ::backend::MasterGetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKVStoreState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_KillStorageServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_KillStorageServer() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_KillStorageServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KillStorageServer(::grpc::ServerContext* /*context*/, const ::backend::KillStorageServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestKillStorageServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReviveStorageServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReviveStorageServer() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ReviveStorageServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReviveStorageServer(::grpc::ServerContext* /*context*/, const ::backend::KillStorageServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReviveStorageServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsInitialStorageServerStartup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsInitialStorageServerStartup() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_IsInitialStorageServerStartup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsInitialStorageServerStartup(::grpc::ServerContext* /*context*/, const ::backend::IsInitialStorageServerStartupRequest* /*request*/, ::backend::IsInitialStorageServerStartupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsInitialStorageServerStartup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStorageServerStatuses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStorageServerStatuses() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetStorageServerStatuses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStorageServerStatuses(::grpc::ServerContext* /*context*/, const ::backend::GetStorageServerStatusesRequest* /*request*/, ::backend::GetStorageServerStatusesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStorageServerStatuses(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTabletsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTabletsForUser() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTabletsForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTabletsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForUser(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsUserRequest* /*request*/, ::backend::GetTabletsUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTabletsForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTabletsForServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTabletsForServer() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTabletsForServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTabletsForServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForServer(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTabletsForServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetKVStoreState(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::MasterEmpty* /*request*/, ::backend::MasterGetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetKVStoreState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_KillStorageServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_KillStorageServer() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->KillStorageServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_KillStorageServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status KillStorageServer(::grpc::ServerContext* /*context*/, const ::backend::KillStorageServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* KillStorageServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReviveStorageServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReviveStorageServer() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReviveStorageServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReviveStorageServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReviveStorageServer(::grpc::ServerContext* /*context*/, const ::backend::KillStorageServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReviveStorageServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsInitialStorageServerStartup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsInitialStorageServerStartup() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsInitialStorageServerStartup(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsInitialStorageServerStartup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsInitialStorageServerStartup(::grpc::ServerContext* /*context*/, const ::backend::IsInitialStorageServerStartupRequest* /*request*/, ::backend::IsInitialStorageServerStartupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsInitialStorageServerStartup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStorageServerStatuses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStorageServerStatuses() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStorageServerStatuses(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetStorageServerStatuses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStorageServerStatuses(::grpc::ServerContext* /*context*/, const ::backend::GetStorageServerStatusesRequest* /*request*/, ::backend::GetStorageServerStatusesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStorageServerStatuses(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTabletsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTabletsForUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::GetTabletsUserRequest, ::backend::GetTabletsUserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::GetTabletsUserRequest, ::backend::GetTabletsUserResponse>* streamer) {
                       return this->StreamedGetTabletsForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTabletsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTabletsForUser(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsUserRequest* /*request*/, ::backend::GetTabletsUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTabletsForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::GetTabletsUserRequest,::backend::GetTabletsUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTabletsForServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTabletsForServer() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::GetTabletsServerRequest, ::backend::MasterEmpty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::GetTabletsServerRequest, ::backend::MasterEmpty>* streamer) {
                       return this->StreamedGetTabletsForServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTabletsForServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTabletsForServer(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTabletsForServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::GetTabletsServerRequest,::backend::MasterEmpty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::MasterEmpty, ::backend::MasterGetKVStoreStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::MasterEmpty, ::backend::MasterGetKVStoreStateResponse>* streamer) {
                       return this->StreamedGetKVStoreState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::MasterEmpty* /*request*/, ::backend::MasterGetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetKVStoreState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::MasterEmpty,::backend::MasterGetKVStoreStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_KillStorageServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_KillStorageServer() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::KillStorageServerRequest, ::backend::MasterEmpty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::KillStorageServerRequest, ::backend::MasterEmpty>* streamer) {
                       return this->StreamedKillStorageServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_KillStorageServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status KillStorageServer(::grpc::ServerContext* /*context*/, const ::backend::KillStorageServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedKillStorageServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::KillStorageServerRequest,::backend::MasterEmpty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReviveStorageServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReviveStorageServer() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::KillStorageServerRequest, ::backend::MasterEmpty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::KillStorageServerRequest, ::backend::MasterEmpty>* streamer) {
                       return this->StreamedReviveStorageServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReviveStorageServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReviveStorageServer(::grpc::ServerContext* /*context*/, const ::backend::KillStorageServerRequest* /*request*/, ::backend::MasterEmpty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReviveStorageServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::KillStorageServerRequest,::backend::MasterEmpty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsInitialStorageServerStartup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsInitialStorageServerStartup() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::IsInitialStorageServerStartupRequest, ::backend::IsInitialStorageServerStartupResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::IsInitialStorageServerStartupRequest, ::backend::IsInitialStorageServerStartupResponse>* streamer) {
                       return this->StreamedIsInitialStorageServerStartup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsInitialStorageServerStartup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsInitialStorageServerStartup(::grpc::ServerContext* /*context*/, const ::backend::IsInitialStorageServerStartupRequest* /*request*/, ::backend::IsInitialStorageServerStartupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsInitialStorageServerStartup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::IsInitialStorageServerStartupRequest,::backend::IsInitialStorageServerStartupResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStorageServerStatuses : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStorageServerStatuses() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::GetStorageServerStatusesRequest, ::backend::GetStorageServerStatusesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::GetStorageServerStatusesRequest, ::backend::GetStorageServerStatusesResponse>* streamer) {
                       return this->StreamedGetStorageServerStatuses(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStorageServerStatuses() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStorageServerStatuses(::grpc::ServerContext* /*context*/, const ::backend::GetStorageServerStatusesRequest* /*request*/, ::backend::GetStorageServerStatusesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStorageServerStatuses(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::GetStorageServerStatusesRequest,::backend::GetStorageServerStatusesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetTabletsForUser<WithStreamedUnaryMethod_GetTabletsForServer<WithStreamedUnaryMethod_GetKVStoreState<WithStreamedUnaryMethod_KillStorageServer<WithStreamedUnaryMethod_ReviveStorageServer<WithStreamedUnaryMethod_IsInitialStorageServerStartup<WithStreamedUnaryMethod_GetStorageServerStatuses<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetTabletsForUser<WithStreamedUnaryMethod_GetTabletsForServer<WithStreamedUnaryMethod_GetKVStoreState<WithStreamedUnaryMethod_KillStorageServer<WithStreamedUnaryMethod_ReviveStorageServer<WithStreamedUnaryMethod_IsInitialStorageServerStartup<WithStreamedUnaryMethod_GetStorageServerStatuses<Service > > > > > > > StreamedService;
};

}  // namespace backend


#endif  // GRPC_masterserver_2eproto__INCLUDED
