// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: storageserver.proto

#include "storageserver.pb.h"
#include "storageserver.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace backend {

static const char* StorageServer_method_names[] = {
  "/backend.StorageServer/StorageGet",
  "/backend.StorageServer/StoragePut",
  "/backend.StorageServer/StorageCPut",
  "/backend.StorageServer/StorageDelete",
  "/backend.StorageServer/SuicideSwitch",
};

std::unique_ptr< StorageServer::Stub> StorageServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StorageServer::Stub> stub(new StorageServer::Stub(channel, options));
  return stub;
}

StorageServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StorageGet_(StorageServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoragePut_(StorageServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StorageCPut_(StorageServer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StorageDelete_(StorageServer_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SuicideSwitch_(StorageServer_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status StorageServer::Stub::StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StorageGet_, context, request, response);
}

void StorageServer::Stub::async::StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StorageGet_, context, request, response, std::move(f));
}

void StorageServer::Stub::async::StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StorageGet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::PrepareAsyncStorageGetRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::StorageServerResponse, ::backend::StorageServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StorageGet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::AsyncStorageGetRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStorageGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageServer::Stub::StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StoragePut_, context, request, response);
}

void StorageServer::Stub::async::StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoragePut_, context, request, response, std::move(f));
}

void StorageServer::Stub::async::StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoragePut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::PrepareAsyncStoragePutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::StorageServerResponse, ::backend::StorageServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StoragePut_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::AsyncStoragePutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStoragePutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageServer::Stub::StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StorageCPut_, context, request, response);
}

void StorageServer::Stub::async::StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StorageCPut_, context, request, response, std::move(f));
}

void StorageServer::Stub::async::StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StorageCPut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::PrepareAsyncStorageCPutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::StorageServerResponse, ::backend::StorageServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StorageCPut_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::AsyncStorageCPutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStorageCPutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageServer::Stub::StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StorageDelete_, context, request, response);
}

void StorageServer::Stub::async::StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StorageDelete_, context, request, response, std::move(f));
}

void StorageServer::Stub::async::StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StorageDelete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::PrepareAsyncStorageDeleteRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::StorageServerResponse, ::backend::StorageServerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StorageDelete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::AsyncStorageDeleteRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStorageDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StorageServer::Stub::SuicideSwitch(::grpc::ClientContext* context, const ::backend::SuicideRequest& request, ::backend::StorageServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::backend::SuicideRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SuicideSwitch_, context, request, response);
}

void StorageServer::Stub::async::SuicideSwitch(::grpc::ClientContext* context, const ::backend::SuicideRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::backend::SuicideRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SuicideSwitch_, context, request, response, std::move(f));
}

void StorageServer::Stub::async::SuicideSwitch(::grpc::ClientContext* context, const ::backend::SuicideRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SuicideSwitch_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::PrepareAsyncSuicideSwitchRaw(::grpc::ClientContext* context, const ::backend::SuicideRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::backend::StorageServerResponse, ::backend::SuicideRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SuicideSwitch_, context, request);
}

::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* StorageServer::Stub::AsyncSuicideSwitchRaw(::grpc::ClientContext* context, const ::backend::SuicideRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSuicideSwitchRaw(context, request, cq);
  result->StartCall();
  return result;
}

StorageServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageServer::Service, ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::StorageServerRequest* req,
             ::backend::StorageServerResponse* resp) {
               return service->StorageGet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageServer::Service, ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::StorageServerRequest* req,
             ::backend::StorageServerResponse* resp) {
               return service->StoragePut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageServer::Service, ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::StorageServerRequest* req,
             ::backend::StorageServerResponse* resp) {
               return service->StorageCPut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageServer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageServer::Service, ::backend::StorageServerRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::StorageServerRequest* req,
             ::backend::StorageServerResponse* resp) {
               return service->StorageDelete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StorageServer_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StorageServer::Service, ::backend::SuicideRequest, ::backend::StorageServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StorageServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::backend::SuicideRequest* req,
             ::backend::StorageServerResponse* resp) {
               return service->SuicideSwitch(ctx, req, resp);
             }, this)));
}

StorageServer::Service::~Service() {
}

::grpc::Status StorageServer::Service::StorageGet(::grpc::ServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageServer::Service::StoragePut(::grpc::ServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageServer::Service::StorageCPut(::grpc::ServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageServer::Service::StorageDelete(::grpc::ServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StorageServer::Service::SuicideSwitch(::grpc::ServerContext* context, const ::backend::SuicideRequest* request, ::backend::StorageServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace backend

