// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storageserver.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_storageserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_storageserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_storageserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_storageserver_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_storageserver_2eproto;
namespace backend {
class StorageServerRequest;
struct StorageServerRequestDefaultTypeInternal;
extern StorageServerRequestDefaultTypeInternal _StorageServerRequest_default_instance_;
class StorageServerResponse;
struct StorageServerResponseDefaultTypeInternal;
extern StorageServerResponseDefaultTypeInternal _StorageServerResponse_default_instance_;
class SuicideRequest;
struct SuicideRequestDefaultTypeInternal;
extern SuicideRequestDefaultTypeInternal _SuicideRequest_default_instance_;
}  // namespace backend
PROTOBUF_NAMESPACE_OPEN
template<> ::backend::StorageServerRequest* Arena::CreateMaybeMessage<::backend::StorageServerRequest>(Arena*);
template<> ::backend::StorageServerResponse* Arena::CreateMaybeMessage<::backend::StorageServerResponse>(Arena*);
template<> ::backend::SuicideRequest* Arena::CreateMaybeMessage<::backend::SuicideRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace backend {

// ===================================================================

class StorageServerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backend.StorageServerRequest) */ {
 public:
  inline StorageServerRequest() : StorageServerRequest(nullptr) {}
  ~StorageServerRequest() override;
  explicit PROTOBUF_CONSTEXPR StorageServerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StorageServerRequest(const StorageServerRequest& from);
  StorageServerRequest(StorageServerRequest&& from) noexcept
    : StorageServerRequest() {
    *this = ::std::move(from);
  }

  inline StorageServerRequest& operator=(const StorageServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageServerRequest& operator=(StorageServerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StorageServerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StorageServerRequest* internal_default_instance() {
    return reinterpret_cast<const StorageServerRequest*>(
               &_StorageServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StorageServerRequest& a, StorageServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageServerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StorageServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StorageServerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StorageServerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StorageServerRequest& from) {
    StorageServerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageServerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backend.StorageServerRequest";
  }
  protected:
  explicit StorageServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
    kValue1FieldNumber = 3,
    kValue2FieldNumber = 4,
    kFromPrimaryFieldNumber = 5,
    kSequenceNumberFieldNumber = 6,
  };
  // string row = 1;
  void clear_row();
  const std::string& row() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_row(ArgT0&& arg0, ArgT... args);
  std::string* mutable_row();
  PROTOBUF_NODISCARD std::string* release_row();
  void set_allocated_row(std::string* row);
  private:
  const std::string& _internal_row() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_row(const std::string& value);
  std::string* _internal_mutable_row();
  public:

  // string col = 2;
  void clear_col();
  const std::string& col() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_col(ArgT0&& arg0, ArgT... args);
  std::string* mutable_col();
  PROTOBUF_NODISCARD std::string* release_col();
  void set_allocated_col(std::string* col);
  private:
  const std::string& _internal_col() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_col(const std::string& value);
  std::string* _internal_mutable_col();
  public:

  // optional string value1 = 3;
  bool has_value1() const;
  private:
  bool _internal_has_value1() const;
  public:
  void clear_value1();
  const std::string& value1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value1();
  PROTOBUF_NODISCARD std::string* release_value1();
  void set_allocated_value1(std::string* value1);
  private:
  const std::string& _internal_value1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value1(const std::string& value);
  std::string* _internal_mutable_value1();
  public:

  // optional string value2 = 4;
  bool has_value2() const;
  private:
  bool _internal_has_value2() const;
  public:
  void clear_value2();
  const std::string& value2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value2();
  PROTOBUF_NODISCARD std::string* release_value2();
  void set_allocated_value2(std::string* value2);
  private:
  const std::string& _internal_value2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value2(const std::string& value);
  std::string* _internal_mutable_value2();
  public:

  // bool from_primary = 5;
  void clear_from_primary();
  bool from_primary() const;
  void set_from_primary(bool value);
  private:
  bool _internal_from_primary() const;
  void _internal_set_from_primary(bool value);
  public:

  // optional int32 sequence_number = 6;
  bool has_sequence_number() const;
  private:
  bool _internal_has_sequence_number() const;
  public:
  void clear_sequence_number();
  int32_t sequence_number() const;
  void set_sequence_number(int32_t value);
  private:
  int32_t _internal_sequence_number() const;
  void _internal_set_sequence_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:backend.StorageServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr col_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value2_;
    bool from_primary_;
    int32_t sequence_number_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storageserver_2eproto;
};
// -------------------------------------------------------------------

class SuicideRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:backend.SuicideRequest) */ {
 public:
  inline SuicideRequest() : SuicideRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SuicideRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuicideRequest(const SuicideRequest& from);
  SuicideRequest(SuicideRequest&& from) noexcept
    : SuicideRequest() {
    *this = ::std::move(from);
  }

  inline SuicideRequest& operator=(const SuicideRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuicideRequest& operator=(SuicideRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SuicideRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuicideRequest* internal_default_instance() {
    return reinterpret_cast<const SuicideRequest*>(
               &_SuicideRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SuicideRequest& a, SuicideRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SuicideRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuicideRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SuicideRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SuicideRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SuicideRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SuicideRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backend.SuicideRequest";
  }
  protected:
  explicit SuicideRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:backend.SuicideRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_storageserver_2eproto;
};
// -------------------------------------------------------------------

class StorageServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backend.StorageServerResponse) */ {
 public:
  inline StorageServerResponse() : StorageServerResponse(nullptr) {}
  ~StorageServerResponse() override;
  explicit PROTOBUF_CONSTEXPR StorageServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StorageServerResponse(const StorageServerResponse& from);
  StorageServerResponse(StorageServerResponse&& from) noexcept
    : StorageServerResponse() {
    *this = ::std::move(from);
  }

  inline StorageServerResponse& operator=(const StorageServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StorageServerResponse& operator=(StorageServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StorageServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StorageServerResponse* internal_default_instance() {
    return reinterpret_cast<const StorageServerResponse*>(
               &_StorageServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StorageServerResponse& a, StorageServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StorageServerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StorageServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StorageServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StorageServerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StorageServerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StorageServerResponse& from) {
    StorageServerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageServerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backend.StorageServerResponse";
  }
  protected:
  explicit StorageServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // optional string value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:backend.StorageServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storageserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StorageServerRequest

// string row = 1;
inline void StorageServerRequest::clear_row() {
  _impl_.row_.ClearToEmpty();
}
inline const std::string& StorageServerRequest::row() const {
  // @@protoc_insertion_point(field_get:backend.StorageServerRequest.row)
  return _internal_row();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StorageServerRequest::set_row(ArgT0&& arg0, ArgT... args) {
 
 _impl_.row_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backend.StorageServerRequest.row)
}
inline std::string* StorageServerRequest::mutable_row() {
  std::string* _s = _internal_mutable_row();
  // @@protoc_insertion_point(field_mutable:backend.StorageServerRequest.row)
  return _s;
}
inline const std::string& StorageServerRequest::_internal_row() const {
  return _impl_.row_.Get();
}
inline void StorageServerRequest::_internal_set_row(const std::string& value) {
  
  _impl_.row_.Set(value, GetArenaForAllocation());
}
inline std::string* StorageServerRequest::_internal_mutable_row() {
  
  return _impl_.row_.Mutable(GetArenaForAllocation());
}
inline std::string* StorageServerRequest::release_row() {
  // @@protoc_insertion_point(field_release:backend.StorageServerRequest.row)
  return _impl_.row_.Release();
}
inline void StorageServerRequest::set_allocated_row(std::string* row) {
  if (row != nullptr) {
    
  } else {
    
  }
  _impl_.row_.SetAllocated(row, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.row_.IsDefault()) {
    _impl_.row_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backend.StorageServerRequest.row)
}

// string col = 2;
inline void StorageServerRequest::clear_col() {
  _impl_.col_.ClearToEmpty();
}
inline const std::string& StorageServerRequest::col() const {
  // @@protoc_insertion_point(field_get:backend.StorageServerRequest.col)
  return _internal_col();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StorageServerRequest::set_col(ArgT0&& arg0, ArgT... args) {
 
 _impl_.col_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backend.StorageServerRequest.col)
}
inline std::string* StorageServerRequest::mutable_col() {
  std::string* _s = _internal_mutable_col();
  // @@protoc_insertion_point(field_mutable:backend.StorageServerRequest.col)
  return _s;
}
inline const std::string& StorageServerRequest::_internal_col() const {
  return _impl_.col_.Get();
}
inline void StorageServerRequest::_internal_set_col(const std::string& value) {
  
  _impl_.col_.Set(value, GetArenaForAllocation());
}
inline std::string* StorageServerRequest::_internal_mutable_col() {
  
  return _impl_.col_.Mutable(GetArenaForAllocation());
}
inline std::string* StorageServerRequest::release_col() {
  // @@protoc_insertion_point(field_release:backend.StorageServerRequest.col)
  return _impl_.col_.Release();
}
inline void StorageServerRequest::set_allocated_col(std::string* col) {
  if (col != nullptr) {
    
  } else {
    
  }
  _impl_.col_.SetAllocated(col, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.col_.IsDefault()) {
    _impl_.col_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backend.StorageServerRequest.col)
}

// optional string value1 = 3;
inline bool StorageServerRequest::_internal_has_value1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StorageServerRequest::has_value1() const {
  return _internal_has_value1();
}
inline void StorageServerRequest::clear_value1() {
  _impl_.value1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StorageServerRequest::value1() const {
  // @@protoc_insertion_point(field_get:backend.StorageServerRequest.value1)
  return _internal_value1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StorageServerRequest::set_value1(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.value1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backend.StorageServerRequest.value1)
}
inline std::string* StorageServerRequest::mutable_value1() {
  std::string* _s = _internal_mutable_value1();
  // @@protoc_insertion_point(field_mutable:backend.StorageServerRequest.value1)
  return _s;
}
inline const std::string& StorageServerRequest::_internal_value1() const {
  return _impl_.value1_.Get();
}
inline void StorageServerRequest::_internal_set_value1(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value1_.Set(value, GetArenaForAllocation());
}
inline std::string* StorageServerRequest::_internal_mutable_value1() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.value1_.Mutable(GetArenaForAllocation());
}
inline std::string* StorageServerRequest::release_value1() {
  // @@protoc_insertion_point(field_release:backend.StorageServerRequest.value1)
  if (!_internal_has_value1()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.value1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value1_.IsDefault()) {
    _impl_.value1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StorageServerRequest::set_allocated_value1(std::string* value1) {
  if (value1 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value1_.SetAllocated(value1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value1_.IsDefault()) {
    _impl_.value1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backend.StorageServerRequest.value1)
}

// optional string value2 = 4;
inline bool StorageServerRequest::_internal_has_value2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StorageServerRequest::has_value2() const {
  return _internal_has_value2();
}
inline void StorageServerRequest::clear_value2() {
  _impl_.value2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StorageServerRequest::value2() const {
  // @@protoc_insertion_point(field_get:backend.StorageServerRequest.value2)
  return _internal_value2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StorageServerRequest::set_value2(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backend.StorageServerRequest.value2)
}
inline std::string* StorageServerRequest::mutable_value2() {
  std::string* _s = _internal_mutable_value2();
  // @@protoc_insertion_point(field_mutable:backend.StorageServerRequest.value2)
  return _s;
}
inline const std::string& StorageServerRequest::_internal_value2() const {
  return _impl_.value2_.Get();
}
inline void StorageServerRequest::_internal_set_value2(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value2_.Set(value, GetArenaForAllocation());
}
inline std::string* StorageServerRequest::_internal_mutable_value2() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value2_.Mutable(GetArenaForAllocation());
}
inline std::string* StorageServerRequest::release_value2() {
  // @@protoc_insertion_point(field_release:backend.StorageServerRequest.value2)
  if (!_internal_has_value2()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value2_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value2_.IsDefault()) {
    _impl_.value2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StorageServerRequest::set_allocated_value2(std::string* value2) {
  if (value2 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value2_.SetAllocated(value2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value2_.IsDefault()) {
    _impl_.value2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backend.StorageServerRequest.value2)
}

// bool from_primary = 5;
inline void StorageServerRequest::clear_from_primary() {
  _impl_.from_primary_ = false;
}
inline bool StorageServerRequest::_internal_from_primary() const {
  return _impl_.from_primary_;
}
inline bool StorageServerRequest::from_primary() const {
  // @@protoc_insertion_point(field_get:backend.StorageServerRequest.from_primary)
  return _internal_from_primary();
}
inline void StorageServerRequest::_internal_set_from_primary(bool value) {
  
  _impl_.from_primary_ = value;
}
inline void StorageServerRequest::set_from_primary(bool value) {
  _internal_set_from_primary(value);
  // @@protoc_insertion_point(field_set:backend.StorageServerRequest.from_primary)
}

// optional int32 sequence_number = 6;
inline bool StorageServerRequest::_internal_has_sequence_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StorageServerRequest::has_sequence_number() const {
  return _internal_has_sequence_number();
}
inline void StorageServerRequest::clear_sequence_number() {
  _impl_.sequence_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t StorageServerRequest::_internal_sequence_number() const {
  return _impl_.sequence_number_;
}
inline int32_t StorageServerRequest::sequence_number() const {
  // @@protoc_insertion_point(field_get:backend.StorageServerRequest.sequence_number)
  return _internal_sequence_number();
}
inline void StorageServerRequest::_internal_set_sequence_number(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sequence_number_ = value;
}
inline void StorageServerRequest::set_sequence_number(int32_t value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:backend.StorageServerRequest.sequence_number)
}

// -------------------------------------------------------------------

// SuicideRequest

// -------------------------------------------------------------------

// StorageServerResponse

// optional string value = 1;
inline bool StorageServerResponse::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StorageServerResponse::has_value() const {
  return _internal_has_value();
}
inline void StorageServerResponse::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StorageServerResponse::value() const {
  // @@protoc_insertion_point(field_get:backend.StorageServerResponse.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StorageServerResponse::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backend.StorageServerResponse.value)
}
inline std::string* StorageServerResponse::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:backend.StorageServerResponse.value)
  return _s;
}
inline const std::string& StorageServerResponse::_internal_value() const {
  return _impl_.value_.Get();
}
inline void StorageServerResponse::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* StorageServerResponse::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* StorageServerResponse::release_value() {
  // @@protoc_insertion_point(field_release:backend.StorageServerResponse.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StorageServerResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backend.StorageServerResponse.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace backend

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_storageserver_2eproto
