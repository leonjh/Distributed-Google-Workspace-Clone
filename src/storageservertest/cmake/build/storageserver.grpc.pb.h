// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: storageserver.proto
#ifndef GRPC_storageserver_2eproto__INCLUDED
#define GRPC_storageserver_2eproto__INCLUDED

#include "storageserver.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace backend {

class StorageServer final {
 public:
  static constexpr char const* service_full_name() {
    return "backend.StorageServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> AsyncStorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(AsyncStorageGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> PrepareAsyncStorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(PrepareAsyncStorageGetRaw(context, request, cq));
    }
    virtual ::grpc::Status StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> AsyncStoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(AsyncStoragePutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> PrepareAsyncStoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(PrepareAsyncStoragePutRaw(context, request, cq));
    }
    virtual ::grpc::Status StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> AsyncStorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(AsyncStorageCPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> PrepareAsyncStorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(PrepareAsyncStorageCPutRaw(context, request, cq));
    }
    virtual ::grpc::Status StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> AsyncStorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(AsyncStorageDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> PrepareAsyncStorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(PrepareAsyncStorageDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status SuicideSwitch(::grpc::ClientContext* context, const ::backend::SuicideRequest& request, ::backend::StorageServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> AsyncSuicideSwitch(::grpc::ClientContext* context, const ::backend::SuicideRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(AsyncSuicideSwitchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>> PrepareAsyncSuicideSwitch(::grpc::ClientContext* context, const ::backend::SuicideRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>>(PrepareAsyncSuicideSwitchRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SuicideSwitch(::grpc::ClientContext* context, const ::backend::SuicideRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SuicideSwitch(::grpc::ClientContext* context, const ::backend::SuicideRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* AsyncStorageGetRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* PrepareAsyncStorageGetRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* AsyncStoragePutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* PrepareAsyncStoragePutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* AsyncStorageCPutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* PrepareAsyncStorageCPutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* AsyncStorageDeleteRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* PrepareAsyncStorageDeleteRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* AsyncSuicideSwitchRaw(::grpc::ClientContext* context, const ::backend::SuicideRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::StorageServerResponse>* PrepareAsyncSuicideSwitchRaw(::grpc::ClientContext* context, const ::backend::SuicideRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> AsyncStorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(AsyncStorageGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> PrepareAsyncStorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(PrepareAsyncStorageGetRaw(context, request, cq));
    }
    ::grpc::Status StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> AsyncStoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(AsyncStoragePutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> PrepareAsyncStoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(PrepareAsyncStoragePutRaw(context, request, cq));
    }
    ::grpc::Status StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> AsyncStorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(AsyncStorageCPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> PrepareAsyncStorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(PrepareAsyncStorageCPutRaw(context, request, cq));
    }
    ::grpc::Status StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::backend::StorageServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> AsyncStorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(AsyncStorageDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> PrepareAsyncStorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(PrepareAsyncStorageDeleteRaw(context, request, cq));
    }
    ::grpc::Status SuicideSwitch(::grpc::ClientContext* context, const ::backend::SuicideRequest& request, ::backend::StorageServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> AsyncSuicideSwitch(::grpc::ClientContext* context, const ::backend::SuicideRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(AsyncSuicideSwitchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>> PrepareAsyncSuicideSwitch(::grpc::ClientContext* context, const ::backend::SuicideRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>>(PrepareAsyncSuicideSwitchRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) override;
      void StorageGet(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) override;
      void StoragePut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) override;
      void StorageCPut(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) override;
      void StorageDelete(::grpc::ClientContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SuicideSwitch(::grpc::ClientContext* context, const ::backend::SuicideRequest* request, ::backend::StorageServerResponse* response, std::function<void(::grpc::Status)>) override;
      void SuicideSwitch(::grpc::ClientContext* context, const ::backend::SuicideRequest* request, ::backend::StorageServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* AsyncStorageGetRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* PrepareAsyncStorageGetRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* AsyncStoragePutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* PrepareAsyncStoragePutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* AsyncStorageCPutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* PrepareAsyncStorageCPutRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* AsyncStorageDeleteRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* PrepareAsyncStorageDeleteRaw(::grpc::ClientContext* context, const ::backend::StorageServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* AsyncSuicideSwitchRaw(::grpc::ClientContext* context, const ::backend::SuicideRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::StorageServerResponse>* PrepareAsyncSuicideSwitchRaw(::grpc::ClientContext* context, const ::backend::SuicideRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StorageGet_;
    const ::grpc::internal::RpcMethod rpcmethod_StoragePut_;
    const ::grpc::internal::RpcMethod rpcmethod_StorageCPut_;
    const ::grpc::internal::RpcMethod rpcmethod_StorageDelete_;
    const ::grpc::internal::RpcMethod rpcmethod_SuicideSwitch_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StorageGet(::grpc::ServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response);
    virtual ::grpc::Status StoragePut(::grpc::ServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response);
    virtual ::grpc::Status StorageCPut(::grpc::ServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response);
    virtual ::grpc::Status StorageDelete(::grpc::ServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response);
    virtual ::grpc::Status SuicideSwitch(::grpc::ServerContext* context, const ::backend::SuicideRequest* request, ::backend::StorageServerResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StorageGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StorageGet() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StorageGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageGet(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStorageGet(::grpc::ServerContext* context, ::backend::StorageServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::StorageServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StoragePut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StoragePut() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StoragePut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoragePut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoragePut(::grpc::ServerContext* context, ::backend::StorageServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::StorageServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StorageCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StorageCPut() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StorageCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageCPut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStorageCPut(::grpc::ServerContext* context, ::backend::StorageServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::StorageServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StorageDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StorageDelete() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StorageDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageDelete(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStorageDelete(::grpc::ServerContext* context, ::backend::StorageServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::StorageServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SuicideSwitch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SuicideSwitch() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SuicideSwitch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuicideSwitch(::grpc::ServerContext* /*context*/, const ::backend::SuicideRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSuicideSwitch(::grpc::ServerContext* context, ::backend::SuicideRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::StorageServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StorageGet<WithAsyncMethod_StoragePut<WithAsyncMethod_StorageCPut<WithAsyncMethod_StorageDelete<WithAsyncMethod_SuicideSwitch<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StorageGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StorageGet() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::StorageServerRequest, ::backend::StorageServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response) { return this->StorageGet(context, request, response); }));}
    void SetMessageAllocatorFor_StorageGet(
        ::grpc::MessageAllocator< ::backend::StorageServerRequest, ::backend::StorageServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::StorageServerRequest, ::backend::StorageServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StorageGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageGet(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StorageGet(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StoragePut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StoragePut() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::StorageServerRequest, ::backend::StorageServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response) { return this->StoragePut(context, request, response); }));}
    void SetMessageAllocatorFor_StoragePut(
        ::grpc::MessageAllocator< ::backend::StorageServerRequest, ::backend::StorageServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::StorageServerRequest, ::backend::StorageServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StoragePut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoragePut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StoragePut(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StorageCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StorageCPut() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::StorageServerRequest, ::backend::StorageServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response) { return this->StorageCPut(context, request, response); }));}
    void SetMessageAllocatorFor_StorageCPut(
        ::grpc::MessageAllocator< ::backend::StorageServerRequest, ::backend::StorageServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::StorageServerRequest, ::backend::StorageServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StorageCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageCPut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StorageCPut(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StorageDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StorageDelete() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::StorageServerRequest, ::backend::StorageServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::StorageServerRequest* request, ::backend::StorageServerResponse* response) { return this->StorageDelete(context, request, response); }));}
    void SetMessageAllocatorFor_StorageDelete(
        ::grpc::MessageAllocator< ::backend::StorageServerRequest, ::backend::StorageServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::StorageServerRequest, ::backend::StorageServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StorageDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageDelete(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StorageDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SuicideSwitch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SuicideSwitch() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::SuicideRequest, ::backend::StorageServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::SuicideRequest* request, ::backend::StorageServerResponse* response) { return this->SuicideSwitch(context, request, response); }));}
    void SetMessageAllocatorFor_SuicideSwitch(
        ::grpc::MessageAllocator< ::backend::SuicideRequest, ::backend::StorageServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::SuicideRequest, ::backend::StorageServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SuicideSwitch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuicideSwitch(::grpc::ServerContext* /*context*/, const ::backend::SuicideRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SuicideSwitch(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::SuicideRequest* /*request*/, ::backend::StorageServerResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StorageGet<WithCallbackMethod_StoragePut<WithCallbackMethod_StorageCPut<WithCallbackMethod_StorageDelete<WithCallbackMethod_SuicideSwitch<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StorageGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StorageGet() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StorageGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageGet(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StoragePut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StoragePut() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StoragePut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoragePut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StorageCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StorageCPut() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StorageCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageCPut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StorageDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StorageDelete() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StorageDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageDelete(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SuicideSwitch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SuicideSwitch() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SuicideSwitch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuicideSwitch(::grpc::ServerContext* /*context*/, const ::backend::SuicideRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StorageGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StorageGet() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StorageGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageGet(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStorageGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StoragePut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StoragePut() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StoragePut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoragePut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoragePut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StorageCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StorageCPut() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StorageCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageCPut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStorageCPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StorageDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StorageDelete() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_StorageDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageDelete(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStorageDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SuicideSwitch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SuicideSwitch() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SuicideSwitch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuicideSwitch(::grpc::ServerContext* /*context*/, const ::backend::SuicideRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSuicideSwitch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StorageGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StorageGet() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StorageGet(context, request, response); }));
    }
    ~WithRawCallbackMethod_StorageGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageGet(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StorageGet(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StoragePut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StoragePut() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StoragePut(context, request, response); }));
    }
    ~WithRawCallbackMethod_StoragePut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoragePut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StoragePut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StorageCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StorageCPut() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StorageCPut(context, request, response); }));
    }
    ~WithRawCallbackMethod_StorageCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageCPut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StorageCPut(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StorageDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StorageDelete() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StorageDelete(context, request, response); }));
    }
    ~WithRawCallbackMethod_StorageDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StorageDelete(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StorageDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SuicideSwitch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SuicideSwitch() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SuicideSwitch(context, request, response); }));
    }
    ~WithRawCallbackMethod_SuicideSwitch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuicideSwitch(::grpc::ServerContext* /*context*/, const ::backend::SuicideRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SuicideSwitch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StorageGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StorageGet() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::StorageServerRequest, ::backend::StorageServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::StorageServerRequest, ::backend::StorageServerResponse>* streamer) {
                       return this->StreamedStorageGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StorageGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StorageGet(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStorageGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::StorageServerRequest,::backend::StorageServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StoragePut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StoragePut() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::StorageServerRequest, ::backend::StorageServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::StorageServerRequest, ::backend::StorageServerResponse>* streamer) {
                       return this->StreamedStoragePut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StoragePut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StoragePut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStoragePut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::StorageServerRequest,::backend::StorageServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StorageCPut : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StorageCPut() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::StorageServerRequest, ::backend::StorageServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::StorageServerRequest, ::backend::StorageServerResponse>* streamer) {
                       return this->StreamedStorageCPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StorageCPut() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StorageCPut(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStorageCPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::StorageServerRequest,::backend::StorageServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StorageDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StorageDelete() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::StorageServerRequest, ::backend::StorageServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::StorageServerRequest, ::backend::StorageServerResponse>* streamer) {
                       return this->StreamedStorageDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StorageDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StorageDelete(::grpc::ServerContext* /*context*/, const ::backend::StorageServerRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStorageDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::StorageServerRequest,::backend::StorageServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SuicideSwitch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SuicideSwitch() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::SuicideRequest, ::backend::StorageServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::SuicideRequest, ::backend::StorageServerResponse>* streamer) {
                       return this->StreamedSuicideSwitch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SuicideSwitch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SuicideSwitch(::grpc::ServerContext* /*context*/, const ::backend::SuicideRequest* /*request*/, ::backend::StorageServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSuicideSwitch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::SuicideRequest,::backend::StorageServerResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StorageGet<WithStreamedUnaryMethod_StoragePut<WithStreamedUnaryMethod_StorageCPut<WithStreamedUnaryMethod_StorageDelete<WithStreamedUnaryMethod_SuicideSwitch<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_StorageGet<WithStreamedUnaryMethod_StoragePut<WithStreamedUnaryMethod_StorageCPut<WithStreamedUnaryMethod_StorageDelete<WithStreamedUnaryMethod_SuicideSwitch<Service > > > > > StreamedService;
};

}  // namespace backend


#endif  // GRPC_storageserver_2eproto__INCLUDED
