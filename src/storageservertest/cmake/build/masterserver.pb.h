// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterserver.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_masterserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_masterserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_masterserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_masterserver_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_masterserver_2eproto;
namespace backend {
class GetKVStoreStateRequest;
struct GetKVStoreStateRequestDefaultTypeInternal;
extern GetKVStoreStateRequestDefaultTypeInternal _GetKVStoreStateRequest_default_instance_;
class GetKVStoreStateResponse;
struct GetKVStoreStateResponseDefaultTypeInternal;
extern GetKVStoreStateResponseDefaultTypeInternal _GetKVStoreStateResponse_default_instance_;
class GetKVStoreStateResponse_Row;
struct GetKVStoreStateResponse_RowDefaultTypeInternal;
extern GetKVStoreStateResponse_RowDefaultTypeInternal _GetKVStoreStateResponse_Row_default_instance_;
class GetKVStoreStateResponse_Row_Column;
struct GetKVStoreStateResponse_Row_ColumnDefaultTypeInternal;
extern GetKVStoreStateResponse_Row_ColumnDefaultTypeInternal _GetKVStoreStateResponse_Row_Column_default_instance_;
class GetTabletsResponse;
struct GetTabletsResponseDefaultTypeInternal;
extern GetTabletsResponseDefaultTypeInternal _GetTabletsResponse_default_instance_;
class GetTabletsResponse_TabletGroup;
struct GetTabletsResponse_TabletGroupDefaultTypeInternal;
extern GetTabletsResponse_TabletGroupDefaultTypeInternal _GetTabletsResponse_TabletGroup_default_instance_;
class GetTabletsResponse_TabletGroup_ServerInfo;
struct GetTabletsResponse_TabletGroup_ServerInfoDefaultTypeInternal;
extern GetTabletsResponse_TabletGroup_ServerInfoDefaultTypeInternal _GetTabletsResponse_TabletGroup_ServerInfo_default_instance_;
class GetTabletsServerRequest;
struct GetTabletsServerRequestDefaultTypeInternal;
extern GetTabletsServerRequestDefaultTypeInternal _GetTabletsServerRequest_default_instance_;
class GetTabletsUserRequest;
struct GetTabletsUserRequestDefaultTypeInternal;
extern GetTabletsUserRequestDefaultTypeInternal _GetTabletsUserRequest_default_instance_;
}  // namespace backend
PROTOBUF_NAMESPACE_OPEN
template<> ::backend::GetKVStoreStateRequest* Arena::CreateMaybeMessage<::backend::GetKVStoreStateRequest>(Arena*);
template<> ::backend::GetKVStoreStateResponse* Arena::CreateMaybeMessage<::backend::GetKVStoreStateResponse>(Arena*);
template<> ::backend::GetKVStoreStateResponse_Row* Arena::CreateMaybeMessage<::backend::GetKVStoreStateResponse_Row>(Arena*);
template<> ::backend::GetKVStoreStateResponse_Row_Column* Arena::CreateMaybeMessage<::backend::GetKVStoreStateResponse_Row_Column>(Arena*);
template<> ::backend::GetTabletsResponse* Arena::CreateMaybeMessage<::backend::GetTabletsResponse>(Arena*);
template<> ::backend::GetTabletsResponse_TabletGroup* Arena::CreateMaybeMessage<::backend::GetTabletsResponse_TabletGroup>(Arena*);
template<> ::backend::GetTabletsResponse_TabletGroup_ServerInfo* Arena::CreateMaybeMessage<::backend::GetTabletsResponse_TabletGroup_ServerInfo>(Arena*);
template<> ::backend::GetTabletsServerRequest* Arena::CreateMaybeMessage<::backend::GetTabletsServerRequest>(Arena*);
template<> ::backend::GetTabletsUserRequest* Arena::CreateMaybeMessage<::backend::GetTabletsUserRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace backend {

// ===================================================================

class GetTabletsUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backend.GetTabletsUserRequest) */ {
 public:
  inline GetTabletsUserRequest() : GetTabletsUserRequest(nullptr) {}
  ~GetTabletsUserRequest() override;
  explicit PROTOBUF_CONSTEXPR GetTabletsUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTabletsUserRequest(const GetTabletsUserRequest& from);
  GetTabletsUserRequest(GetTabletsUserRequest&& from) noexcept
    : GetTabletsUserRequest() {
    *this = ::std::move(from);
  }

  inline GetTabletsUserRequest& operator=(const GetTabletsUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTabletsUserRequest& operator=(GetTabletsUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTabletsUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTabletsUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetTabletsUserRequest*>(
               &_GetTabletsUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetTabletsUserRequest& a, GetTabletsUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTabletsUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTabletsUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTabletsUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTabletsUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTabletsUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTabletsUserRequest& from) {
    GetTabletsUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTabletsUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backend.GetTabletsUserRequest";
  }
  protected:
  explicit GetTabletsUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:backend.GetTabletsUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterserver_2eproto;
};
// -------------------------------------------------------------------

class GetTabletsServerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backend.GetTabletsServerRequest) */ {
 public:
  inline GetTabletsServerRequest() : GetTabletsServerRequest(nullptr) {}
  ~GetTabletsServerRequest() override;
  explicit PROTOBUF_CONSTEXPR GetTabletsServerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTabletsServerRequest(const GetTabletsServerRequest& from);
  GetTabletsServerRequest(GetTabletsServerRequest&& from) noexcept
    : GetTabletsServerRequest() {
    *this = ::std::move(from);
  }

  inline GetTabletsServerRequest& operator=(const GetTabletsServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTabletsServerRequest& operator=(GetTabletsServerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTabletsServerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTabletsServerRequest* internal_default_instance() {
    return reinterpret_cast<const GetTabletsServerRequest*>(
               &_GetTabletsServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetTabletsServerRequest& a, GetTabletsServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTabletsServerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTabletsServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTabletsServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTabletsServerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTabletsServerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTabletsServerRequest& from) {
    GetTabletsServerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTabletsServerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backend.GetTabletsServerRequest";
  }
  protected:
  explicit GetTabletsServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:backend.GetTabletsServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterserver_2eproto;
};
// -------------------------------------------------------------------

class GetTabletsResponse_TabletGroup_ServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backend.GetTabletsResponse.TabletGroup.ServerInfo) */ {
 public:
  inline GetTabletsResponse_TabletGroup_ServerInfo() : GetTabletsResponse_TabletGroup_ServerInfo(nullptr) {}
  ~GetTabletsResponse_TabletGroup_ServerInfo() override;
  explicit PROTOBUF_CONSTEXPR GetTabletsResponse_TabletGroup_ServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTabletsResponse_TabletGroup_ServerInfo(const GetTabletsResponse_TabletGroup_ServerInfo& from);
  GetTabletsResponse_TabletGroup_ServerInfo(GetTabletsResponse_TabletGroup_ServerInfo&& from) noexcept
    : GetTabletsResponse_TabletGroup_ServerInfo() {
    *this = ::std::move(from);
  }

  inline GetTabletsResponse_TabletGroup_ServerInfo& operator=(const GetTabletsResponse_TabletGroup_ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTabletsResponse_TabletGroup_ServerInfo& operator=(GetTabletsResponse_TabletGroup_ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTabletsResponse_TabletGroup_ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTabletsResponse_TabletGroup_ServerInfo* internal_default_instance() {
    return reinterpret_cast<const GetTabletsResponse_TabletGroup_ServerInfo*>(
               &_GetTabletsResponse_TabletGroup_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetTabletsResponse_TabletGroup_ServerInfo& a, GetTabletsResponse_TabletGroup_ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTabletsResponse_TabletGroup_ServerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTabletsResponse_TabletGroup_ServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTabletsResponse_TabletGroup_ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTabletsResponse_TabletGroup_ServerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTabletsResponse_TabletGroup_ServerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTabletsResponse_TabletGroup_ServerInfo& from) {
    GetTabletsResponse_TabletGroup_ServerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTabletsResponse_TabletGroup_ServerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backend.GetTabletsResponse.TabletGroup.ServerInfo";
  }
  protected:
  explicit GetTabletsResponse_TabletGroup_ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kMasterFieldNumber = 2,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bool master = 2;
  void clear_master();
  bool master() const;
  void set_master(bool value);
  private:
  bool _internal_master() const;
  void _internal_set_master(bool value);
  public:

  // @@protoc_insertion_point(class_scope:backend.GetTabletsResponse.TabletGroup.ServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    bool master_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterserver_2eproto;
};
// -------------------------------------------------------------------

class GetTabletsResponse_TabletGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backend.GetTabletsResponse.TabletGroup) */ {
 public:
  inline GetTabletsResponse_TabletGroup() : GetTabletsResponse_TabletGroup(nullptr) {}
  ~GetTabletsResponse_TabletGroup() override;
  explicit PROTOBUF_CONSTEXPR GetTabletsResponse_TabletGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTabletsResponse_TabletGroup(const GetTabletsResponse_TabletGroup& from);
  GetTabletsResponse_TabletGroup(GetTabletsResponse_TabletGroup&& from) noexcept
    : GetTabletsResponse_TabletGroup() {
    *this = ::std::move(from);
  }

  inline GetTabletsResponse_TabletGroup& operator=(const GetTabletsResponse_TabletGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTabletsResponse_TabletGroup& operator=(GetTabletsResponse_TabletGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTabletsResponse_TabletGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTabletsResponse_TabletGroup* internal_default_instance() {
    return reinterpret_cast<const GetTabletsResponse_TabletGroup*>(
               &_GetTabletsResponse_TabletGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetTabletsResponse_TabletGroup& a, GetTabletsResponse_TabletGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTabletsResponse_TabletGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTabletsResponse_TabletGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTabletsResponse_TabletGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTabletsResponse_TabletGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTabletsResponse_TabletGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTabletsResponse_TabletGroup& from) {
    GetTabletsResponse_TabletGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTabletsResponse_TabletGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backend.GetTabletsResponse.TabletGroup";
  }
  protected:
  explicit GetTabletsResponse_TabletGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetTabletsResponse_TabletGroup_ServerInfo ServerInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 3,
    kBeginFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // repeated .backend.GetTabletsResponse.TabletGroup.ServerInfo servers = 3;
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  ::backend::GetTabletsResponse_TabletGroup_ServerInfo* mutable_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetTabletsResponse_TabletGroup_ServerInfo >*
      mutable_servers();
  private:
  const ::backend::GetTabletsResponse_TabletGroup_ServerInfo& _internal_servers(int index) const;
  ::backend::GetTabletsResponse_TabletGroup_ServerInfo* _internal_add_servers();
  public:
  const ::backend::GetTabletsResponse_TabletGroup_ServerInfo& servers(int index) const;
  ::backend::GetTabletsResponse_TabletGroup_ServerInfo* add_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetTabletsResponse_TabletGroup_ServerInfo >&
      servers() const;

  // string begin = 1;
  void clear_begin();
  const std::string& begin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_begin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_begin();
  PROTOBUF_NODISCARD std::string* release_begin();
  void set_allocated_begin(std::string* begin);
  private:
  const std::string& _internal_begin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_begin(const std::string& value);
  std::string* _internal_mutable_begin();
  public:

  // string end = 2;
  void clear_end();
  const std::string& end() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end();
  PROTOBUF_NODISCARD std::string* release_end();
  void set_allocated_end(std::string* end);
  private:
  const std::string& _internal_end() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end(const std::string& value);
  std::string* _internal_mutable_end();
  public:

  // @@protoc_insertion_point(class_scope:backend.GetTabletsResponse.TabletGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetTabletsResponse_TabletGroup_ServerInfo > servers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr begin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterserver_2eproto;
};
// -------------------------------------------------------------------

class GetTabletsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backend.GetTabletsResponse) */ {
 public:
  inline GetTabletsResponse() : GetTabletsResponse(nullptr) {}
  ~GetTabletsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetTabletsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTabletsResponse(const GetTabletsResponse& from);
  GetTabletsResponse(GetTabletsResponse&& from) noexcept
    : GetTabletsResponse() {
    *this = ::std::move(from);
  }

  inline GetTabletsResponse& operator=(const GetTabletsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTabletsResponse& operator=(GetTabletsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTabletsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTabletsResponse* internal_default_instance() {
    return reinterpret_cast<const GetTabletsResponse*>(
               &_GetTabletsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetTabletsResponse& a, GetTabletsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTabletsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTabletsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTabletsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTabletsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTabletsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTabletsResponse& from) {
    GetTabletsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTabletsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backend.GetTabletsResponse";
  }
  protected:
  explicit GetTabletsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetTabletsResponse_TabletGroup TabletGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kTabletsFieldNumber = 1,
  };
  // repeated .backend.GetTabletsResponse.TabletGroup tablets = 1;
  int tablets_size() const;
  private:
  int _internal_tablets_size() const;
  public:
  void clear_tablets();
  ::backend::GetTabletsResponse_TabletGroup* mutable_tablets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetTabletsResponse_TabletGroup >*
      mutable_tablets();
  private:
  const ::backend::GetTabletsResponse_TabletGroup& _internal_tablets(int index) const;
  ::backend::GetTabletsResponse_TabletGroup* _internal_add_tablets();
  public:
  const ::backend::GetTabletsResponse_TabletGroup& tablets(int index) const;
  ::backend::GetTabletsResponse_TabletGroup* add_tablets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetTabletsResponse_TabletGroup >&
      tablets() const;

  // @@protoc_insertion_point(class_scope:backend.GetTabletsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetTabletsResponse_TabletGroup > tablets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterserver_2eproto;
};
// -------------------------------------------------------------------

class GetKVStoreStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:backend.GetKVStoreStateRequest) */ {
 public:
  inline GetKVStoreStateRequest() : GetKVStoreStateRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetKVStoreStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetKVStoreStateRequest(const GetKVStoreStateRequest& from);
  GetKVStoreStateRequest(GetKVStoreStateRequest&& from) noexcept
    : GetKVStoreStateRequest() {
    *this = ::std::move(from);
  }

  inline GetKVStoreStateRequest& operator=(const GetKVStoreStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetKVStoreStateRequest& operator=(GetKVStoreStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetKVStoreStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetKVStoreStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetKVStoreStateRequest*>(
               &_GetKVStoreStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetKVStoreStateRequest& a, GetKVStoreStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetKVStoreStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetKVStoreStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetKVStoreStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetKVStoreStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetKVStoreStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetKVStoreStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backend.GetKVStoreStateRequest";
  }
  protected:
  explicit GetKVStoreStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:backend.GetKVStoreStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_masterserver_2eproto;
};
// -------------------------------------------------------------------

class GetKVStoreStateResponse_Row_Column final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backend.GetKVStoreStateResponse.Row.Column) */ {
 public:
  inline GetKVStoreStateResponse_Row_Column() : GetKVStoreStateResponse_Row_Column(nullptr) {}
  ~GetKVStoreStateResponse_Row_Column() override;
  explicit PROTOBUF_CONSTEXPR GetKVStoreStateResponse_Row_Column(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetKVStoreStateResponse_Row_Column(const GetKVStoreStateResponse_Row_Column& from);
  GetKVStoreStateResponse_Row_Column(GetKVStoreStateResponse_Row_Column&& from) noexcept
    : GetKVStoreStateResponse_Row_Column() {
    *this = ::std::move(from);
  }

  inline GetKVStoreStateResponse_Row_Column& operator=(const GetKVStoreStateResponse_Row_Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetKVStoreStateResponse_Row_Column& operator=(GetKVStoreStateResponse_Row_Column&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetKVStoreStateResponse_Row_Column& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetKVStoreStateResponse_Row_Column* internal_default_instance() {
    return reinterpret_cast<const GetKVStoreStateResponse_Row_Column*>(
               &_GetKVStoreStateResponse_Row_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetKVStoreStateResponse_Row_Column& a, GetKVStoreStateResponse_Row_Column& b) {
    a.Swap(&b);
  }
  inline void Swap(GetKVStoreStateResponse_Row_Column* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetKVStoreStateResponse_Row_Column* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetKVStoreStateResponse_Row_Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetKVStoreStateResponse_Row_Column>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetKVStoreStateResponse_Row_Column& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetKVStoreStateResponse_Row_Column& from) {
    GetKVStoreStateResponse_Row_Column::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetKVStoreStateResponse_Row_Column* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backend.GetKVStoreStateResponse.Row.Column";
  }
  protected:
  explicit GetKVStoreStateResponse_Row_Column(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:backend.GetKVStoreStateResponse.Row.Column)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterserver_2eproto;
};
// -------------------------------------------------------------------

class GetKVStoreStateResponse_Row final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backend.GetKVStoreStateResponse.Row) */ {
 public:
  inline GetKVStoreStateResponse_Row() : GetKVStoreStateResponse_Row(nullptr) {}
  ~GetKVStoreStateResponse_Row() override;
  explicit PROTOBUF_CONSTEXPR GetKVStoreStateResponse_Row(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetKVStoreStateResponse_Row(const GetKVStoreStateResponse_Row& from);
  GetKVStoreStateResponse_Row(GetKVStoreStateResponse_Row&& from) noexcept
    : GetKVStoreStateResponse_Row() {
    *this = ::std::move(from);
  }

  inline GetKVStoreStateResponse_Row& operator=(const GetKVStoreStateResponse_Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetKVStoreStateResponse_Row& operator=(GetKVStoreStateResponse_Row&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetKVStoreStateResponse_Row& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetKVStoreStateResponse_Row* internal_default_instance() {
    return reinterpret_cast<const GetKVStoreStateResponse_Row*>(
               &_GetKVStoreStateResponse_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetKVStoreStateResponse_Row& a, GetKVStoreStateResponse_Row& b) {
    a.Swap(&b);
  }
  inline void Swap(GetKVStoreStateResponse_Row* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetKVStoreStateResponse_Row* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetKVStoreStateResponse_Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetKVStoreStateResponse_Row>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetKVStoreStateResponse_Row& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetKVStoreStateResponse_Row& from) {
    GetKVStoreStateResponse_Row::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetKVStoreStateResponse_Row* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backend.GetKVStoreStateResponse.Row";
  }
  protected:
  explicit GetKVStoreStateResponse_Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetKVStoreStateResponse_Row_Column Column;

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .backend.GetKVStoreStateResponse.Row.Column columns = 2;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  ::backend::GetKVStoreStateResponse_Row_Column* mutable_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetKVStoreStateResponse_Row_Column >*
      mutable_columns();
  private:
  const ::backend::GetKVStoreStateResponse_Row_Column& _internal_columns(int index) const;
  ::backend::GetKVStoreStateResponse_Row_Column* _internal_add_columns();
  public:
  const ::backend::GetKVStoreStateResponse_Row_Column& columns(int index) const;
  ::backend::GetKVStoreStateResponse_Row_Column* add_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetKVStoreStateResponse_Row_Column >&
      columns() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:backend.GetKVStoreStateResponse.Row)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetKVStoreStateResponse_Row_Column > columns_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterserver_2eproto;
};
// -------------------------------------------------------------------

class GetKVStoreStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:backend.GetKVStoreStateResponse) */ {
 public:
  inline GetKVStoreStateResponse() : GetKVStoreStateResponse(nullptr) {}
  ~GetKVStoreStateResponse() override;
  explicit PROTOBUF_CONSTEXPR GetKVStoreStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetKVStoreStateResponse(const GetKVStoreStateResponse& from);
  GetKVStoreStateResponse(GetKVStoreStateResponse&& from) noexcept
    : GetKVStoreStateResponse() {
    *this = ::std::move(from);
  }

  inline GetKVStoreStateResponse& operator=(const GetKVStoreStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetKVStoreStateResponse& operator=(GetKVStoreStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetKVStoreStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetKVStoreStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetKVStoreStateResponse*>(
               &_GetKVStoreStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetKVStoreStateResponse& a, GetKVStoreStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetKVStoreStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetKVStoreStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetKVStoreStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetKVStoreStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetKVStoreStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetKVStoreStateResponse& from) {
    GetKVStoreStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetKVStoreStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backend.GetKVStoreStateResponse";
  }
  protected:
  explicit GetKVStoreStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetKVStoreStateResponse_Row Row;

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 1,
  };
  // repeated .backend.GetKVStoreStateResponse.Row rows = 1;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::backend::GetKVStoreStateResponse_Row* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetKVStoreStateResponse_Row >*
      mutable_rows();
  private:
  const ::backend::GetKVStoreStateResponse_Row& _internal_rows(int index) const;
  ::backend::GetKVStoreStateResponse_Row* _internal_add_rows();
  public:
  const ::backend::GetKVStoreStateResponse_Row& rows(int index) const;
  ::backend::GetKVStoreStateResponse_Row* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetKVStoreStateResponse_Row >&
      rows() const;

  // @@protoc_insertion_point(class_scope:backend.GetKVStoreStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetKVStoreStateResponse_Row > rows_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_masterserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetTabletsUserRequest

// string key = 1;
inline void GetTabletsUserRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& GetTabletsUserRequest::key() const {
  // @@protoc_insertion_point(field_get:backend.GetTabletsUserRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTabletsUserRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backend.GetTabletsUserRequest.key)
}
inline std::string* GetTabletsUserRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:backend.GetTabletsUserRequest.key)
  return _s;
}
inline const std::string& GetTabletsUserRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void GetTabletsUserRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTabletsUserRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTabletsUserRequest::release_key() {
  // @@protoc_insertion_point(field_release:backend.GetTabletsUserRequest.key)
  return _impl_.key_.Release();
}
inline void GetTabletsUserRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backend.GetTabletsUserRequest.key)
}

// -------------------------------------------------------------------

// GetTabletsServerRequest

// string address = 1;
inline void GetTabletsServerRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& GetTabletsServerRequest::address() const {
  // @@protoc_insertion_point(field_get:backend.GetTabletsServerRequest.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTabletsServerRequest::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backend.GetTabletsServerRequest.address)
}
inline std::string* GetTabletsServerRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:backend.GetTabletsServerRequest.address)
  return _s;
}
inline const std::string& GetTabletsServerRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void GetTabletsServerRequest::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTabletsServerRequest::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTabletsServerRequest::release_address() {
  // @@protoc_insertion_point(field_release:backend.GetTabletsServerRequest.address)
  return _impl_.address_.Release();
}
inline void GetTabletsServerRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backend.GetTabletsServerRequest.address)
}

// -------------------------------------------------------------------

// GetTabletsResponse_TabletGroup_ServerInfo

// string address = 1;
inline void GetTabletsResponse_TabletGroup_ServerInfo::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& GetTabletsResponse_TabletGroup_ServerInfo::address() const {
  // @@protoc_insertion_point(field_get:backend.GetTabletsResponse.TabletGroup.ServerInfo.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTabletsResponse_TabletGroup_ServerInfo::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backend.GetTabletsResponse.TabletGroup.ServerInfo.address)
}
inline std::string* GetTabletsResponse_TabletGroup_ServerInfo::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:backend.GetTabletsResponse.TabletGroup.ServerInfo.address)
  return _s;
}
inline const std::string& GetTabletsResponse_TabletGroup_ServerInfo::_internal_address() const {
  return _impl_.address_.Get();
}
inline void GetTabletsResponse_TabletGroup_ServerInfo::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTabletsResponse_TabletGroup_ServerInfo::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTabletsResponse_TabletGroup_ServerInfo::release_address() {
  // @@protoc_insertion_point(field_release:backend.GetTabletsResponse.TabletGroup.ServerInfo.address)
  return _impl_.address_.Release();
}
inline void GetTabletsResponse_TabletGroup_ServerInfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backend.GetTabletsResponse.TabletGroup.ServerInfo.address)
}

// bool master = 2;
inline void GetTabletsResponse_TabletGroup_ServerInfo::clear_master() {
  _impl_.master_ = false;
}
inline bool GetTabletsResponse_TabletGroup_ServerInfo::_internal_master() const {
  return _impl_.master_;
}
inline bool GetTabletsResponse_TabletGroup_ServerInfo::master() const {
  // @@protoc_insertion_point(field_get:backend.GetTabletsResponse.TabletGroup.ServerInfo.master)
  return _internal_master();
}
inline void GetTabletsResponse_TabletGroup_ServerInfo::_internal_set_master(bool value) {
  
  _impl_.master_ = value;
}
inline void GetTabletsResponse_TabletGroup_ServerInfo::set_master(bool value) {
  _internal_set_master(value);
  // @@protoc_insertion_point(field_set:backend.GetTabletsResponse.TabletGroup.ServerInfo.master)
}

// -------------------------------------------------------------------

// GetTabletsResponse_TabletGroup

// string begin = 1;
inline void GetTabletsResponse_TabletGroup::clear_begin() {
  _impl_.begin_.ClearToEmpty();
}
inline const std::string& GetTabletsResponse_TabletGroup::begin() const {
  // @@protoc_insertion_point(field_get:backend.GetTabletsResponse.TabletGroup.begin)
  return _internal_begin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTabletsResponse_TabletGroup::set_begin(ArgT0&& arg0, ArgT... args) {
 
 _impl_.begin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backend.GetTabletsResponse.TabletGroup.begin)
}
inline std::string* GetTabletsResponse_TabletGroup::mutable_begin() {
  std::string* _s = _internal_mutable_begin();
  // @@protoc_insertion_point(field_mutable:backend.GetTabletsResponse.TabletGroup.begin)
  return _s;
}
inline const std::string& GetTabletsResponse_TabletGroup::_internal_begin() const {
  return _impl_.begin_.Get();
}
inline void GetTabletsResponse_TabletGroup::_internal_set_begin(const std::string& value) {
  
  _impl_.begin_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTabletsResponse_TabletGroup::_internal_mutable_begin() {
  
  return _impl_.begin_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTabletsResponse_TabletGroup::release_begin() {
  // @@protoc_insertion_point(field_release:backend.GetTabletsResponse.TabletGroup.begin)
  return _impl_.begin_.Release();
}
inline void GetTabletsResponse_TabletGroup::set_allocated_begin(std::string* begin) {
  if (begin != nullptr) {
    
  } else {
    
  }
  _impl_.begin_.SetAllocated(begin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.begin_.IsDefault()) {
    _impl_.begin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backend.GetTabletsResponse.TabletGroup.begin)
}

// string end = 2;
inline void GetTabletsResponse_TabletGroup::clear_end() {
  _impl_.end_.ClearToEmpty();
}
inline const std::string& GetTabletsResponse_TabletGroup::end() const {
  // @@protoc_insertion_point(field_get:backend.GetTabletsResponse.TabletGroup.end)
  return _internal_end();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTabletsResponse_TabletGroup::set_end(ArgT0&& arg0, ArgT... args) {
 
 _impl_.end_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backend.GetTabletsResponse.TabletGroup.end)
}
inline std::string* GetTabletsResponse_TabletGroup::mutable_end() {
  std::string* _s = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:backend.GetTabletsResponse.TabletGroup.end)
  return _s;
}
inline const std::string& GetTabletsResponse_TabletGroup::_internal_end() const {
  return _impl_.end_.Get();
}
inline void GetTabletsResponse_TabletGroup::_internal_set_end(const std::string& value) {
  
  _impl_.end_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTabletsResponse_TabletGroup::_internal_mutable_end() {
  
  return _impl_.end_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTabletsResponse_TabletGroup::release_end() {
  // @@protoc_insertion_point(field_release:backend.GetTabletsResponse.TabletGroup.end)
  return _impl_.end_.Release();
}
inline void GetTabletsResponse_TabletGroup::set_allocated_end(std::string* end) {
  if (end != nullptr) {
    
  } else {
    
  }
  _impl_.end_.SetAllocated(end, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.end_.IsDefault()) {
    _impl_.end_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backend.GetTabletsResponse.TabletGroup.end)
}

// repeated .backend.GetTabletsResponse.TabletGroup.ServerInfo servers = 3;
inline int GetTabletsResponse_TabletGroup::_internal_servers_size() const {
  return _impl_.servers_.size();
}
inline int GetTabletsResponse_TabletGroup::servers_size() const {
  return _internal_servers_size();
}
inline void GetTabletsResponse_TabletGroup::clear_servers() {
  _impl_.servers_.Clear();
}
inline ::backend::GetTabletsResponse_TabletGroup_ServerInfo* GetTabletsResponse_TabletGroup::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:backend.GetTabletsResponse.TabletGroup.servers)
  return _impl_.servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetTabletsResponse_TabletGroup_ServerInfo >*
GetTabletsResponse_TabletGroup::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:backend.GetTabletsResponse.TabletGroup.servers)
  return &_impl_.servers_;
}
inline const ::backend::GetTabletsResponse_TabletGroup_ServerInfo& GetTabletsResponse_TabletGroup::_internal_servers(int index) const {
  return _impl_.servers_.Get(index);
}
inline const ::backend::GetTabletsResponse_TabletGroup_ServerInfo& GetTabletsResponse_TabletGroup::servers(int index) const {
  // @@protoc_insertion_point(field_get:backend.GetTabletsResponse.TabletGroup.servers)
  return _internal_servers(index);
}
inline ::backend::GetTabletsResponse_TabletGroup_ServerInfo* GetTabletsResponse_TabletGroup::_internal_add_servers() {
  return _impl_.servers_.Add();
}
inline ::backend::GetTabletsResponse_TabletGroup_ServerInfo* GetTabletsResponse_TabletGroup::add_servers() {
  ::backend::GetTabletsResponse_TabletGroup_ServerInfo* _add = _internal_add_servers();
  // @@protoc_insertion_point(field_add:backend.GetTabletsResponse.TabletGroup.servers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetTabletsResponse_TabletGroup_ServerInfo >&
GetTabletsResponse_TabletGroup::servers() const {
  // @@protoc_insertion_point(field_list:backend.GetTabletsResponse.TabletGroup.servers)
  return _impl_.servers_;
}

// -------------------------------------------------------------------

// GetTabletsResponse

// repeated .backend.GetTabletsResponse.TabletGroup tablets = 1;
inline int GetTabletsResponse::_internal_tablets_size() const {
  return _impl_.tablets_.size();
}
inline int GetTabletsResponse::tablets_size() const {
  return _internal_tablets_size();
}
inline void GetTabletsResponse::clear_tablets() {
  _impl_.tablets_.Clear();
}
inline ::backend::GetTabletsResponse_TabletGroup* GetTabletsResponse::mutable_tablets(int index) {
  // @@protoc_insertion_point(field_mutable:backend.GetTabletsResponse.tablets)
  return _impl_.tablets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetTabletsResponse_TabletGroup >*
GetTabletsResponse::mutable_tablets() {
  // @@protoc_insertion_point(field_mutable_list:backend.GetTabletsResponse.tablets)
  return &_impl_.tablets_;
}
inline const ::backend::GetTabletsResponse_TabletGroup& GetTabletsResponse::_internal_tablets(int index) const {
  return _impl_.tablets_.Get(index);
}
inline const ::backend::GetTabletsResponse_TabletGroup& GetTabletsResponse::tablets(int index) const {
  // @@protoc_insertion_point(field_get:backend.GetTabletsResponse.tablets)
  return _internal_tablets(index);
}
inline ::backend::GetTabletsResponse_TabletGroup* GetTabletsResponse::_internal_add_tablets() {
  return _impl_.tablets_.Add();
}
inline ::backend::GetTabletsResponse_TabletGroup* GetTabletsResponse::add_tablets() {
  ::backend::GetTabletsResponse_TabletGroup* _add = _internal_add_tablets();
  // @@protoc_insertion_point(field_add:backend.GetTabletsResponse.tablets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetTabletsResponse_TabletGroup >&
GetTabletsResponse::tablets() const {
  // @@protoc_insertion_point(field_list:backend.GetTabletsResponse.tablets)
  return _impl_.tablets_;
}

// -------------------------------------------------------------------

// GetKVStoreStateRequest

// -------------------------------------------------------------------

// GetKVStoreStateResponse_Row_Column

// string name = 1;
inline void GetKVStoreStateResponse_Row_Column::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetKVStoreStateResponse_Row_Column::name() const {
  // @@protoc_insertion_point(field_get:backend.GetKVStoreStateResponse.Row.Column.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetKVStoreStateResponse_Row_Column::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backend.GetKVStoreStateResponse.Row.Column.name)
}
inline std::string* GetKVStoreStateResponse_Row_Column::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:backend.GetKVStoreStateResponse.Row.Column.name)
  return _s;
}
inline const std::string& GetKVStoreStateResponse_Row_Column::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetKVStoreStateResponse_Row_Column::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetKVStoreStateResponse_Row_Column::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetKVStoreStateResponse_Row_Column::release_name() {
  // @@protoc_insertion_point(field_release:backend.GetKVStoreStateResponse.Row.Column.name)
  return _impl_.name_.Release();
}
inline void GetKVStoreStateResponse_Row_Column::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backend.GetKVStoreStateResponse.Row.Column.name)
}

// string data = 2;
inline void GetKVStoreStateResponse_Row_Column::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& GetKVStoreStateResponse_Row_Column::data() const {
  // @@protoc_insertion_point(field_get:backend.GetKVStoreStateResponse.Row.Column.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetKVStoreStateResponse_Row_Column::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backend.GetKVStoreStateResponse.Row.Column.data)
}
inline std::string* GetKVStoreStateResponse_Row_Column::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:backend.GetKVStoreStateResponse.Row.Column.data)
  return _s;
}
inline const std::string& GetKVStoreStateResponse_Row_Column::_internal_data() const {
  return _impl_.data_.Get();
}
inline void GetKVStoreStateResponse_Row_Column::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* GetKVStoreStateResponse_Row_Column::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* GetKVStoreStateResponse_Row_Column::release_data() {
  // @@protoc_insertion_point(field_release:backend.GetKVStoreStateResponse.Row.Column.data)
  return _impl_.data_.Release();
}
inline void GetKVStoreStateResponse_Row_Column::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backend.GetKVStoreStateResponse.Row.Column.data)
}

// -------------------------------------------------------------------

// GetKVStoreStateResponse_Row

// string name = 1;
inline void GetKVStoreStateResponse_Row::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetKVStoreStateResponse_Row::name() const {
  // @@protoc_insertion_point(field_get:backend.GetKVStoreStateResponse.Row.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetKVStoreStateResponse_Row::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backend.GetKVStoreStateResponse.Row.name)
}
inline std::string* GetKVStoreStateResponse_Row::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:backend.GetKVStoreStateResponse.Row.name)
  return _s;
}
inline const std::string& GetKVStoreStateResponse_Row::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetKVStoreStateResponse_Row::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetKVStoreStateResponse_Row::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetKVStoreStateResponse_Row::release_name() {
  // @@protoc_insertion_point(field_release:backend.GetKVStoreStateResponse.Row.name)
  return _impl_.name_.Release();
}
inline void GetKVStoreStateResponse_Row::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backend.GetKVStoreStateResponse.Row.name)
}

// repeated .backend.GetKVStoreStateResponse.Row.Column columns = 2;
inline int GetKVStoreStateResponse_Row::_internal_columns_size() const {
  return _impl_.columns_.size();
}
inline int GetKVStoreStateResponse_Row::columns_size() const {
  return _internal_columns_size();
}
inline void GetKVStoreStateResponse_Row::clear_columns() {
  _impl_.columns_.Clear();
}
inline ::backend::GetKVStoreStateResponse_Row_Column* GetKVStoreStateResponse_Row::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:backend.GetKVStoreStateResponse.Row.columns)
  return _impl_.columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetKVStoreStateResponse_Row_Column >*
GetKVStoreStateResponse_Row::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:backend.GetKVStoreStateResponse.Row.columns)
  return &_impl_.columns_;
}
inline const ::backend::GetKVStoreStateResponse_Row_Column& GetKVStoreStateResponse_Row::_internal_columns(int index) const {
  return _impl_.columns_.Get(index);
}
inline const ::backend::GetKVStoreStateResponse_Row_Column& GetKVStoreStateResponse_Row::columns(int index) const {
  // @@protoc_insertion_point(field_get:backend.GetKVStoreStateResponse.Row.columns)
  return _internal_columns(index);
}
inline ::backend::GetKVStoreStateResponse_Row_Column* GetKVStoreStateResponse_Row::_internal_add_columns() {
  return _impl_.columns_.Add();
}
inline ::backend::GetKVStoreStateResponse_Row_Column* GetKVStoreStateResponse_Row::add_columns() {
  ::backend::GetKVStoreStateResponse_Row_Column* _add = _internal_add_columns();
  // @@protoc_insertion_point(field_add:backend.GetKVStoreStateResponse.Row.columns)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetKVStoreStateResponse_Row_Column >&
GetKVStoreStateResponse_Row::columns() const {
  // @@protoc_insertion_point(field_list:backend.GetKVStoreStateResponse.Row.columns)
  return _impl_.columns_;
}

// -------------------------------------------------------------------

// GetKVStoreStateResponse

// repeated .backend.GetKVStoreStateResponse.Row rows = 1;
inline int GetKVStoreStateResponse::_internal_rows_size() const {
  return _impl_.rows_.size();
}
inline int GetKVStoreStateResponse::rows_size() const {
  return _internal_rows_size();
}
inline void GetKVStoreStateResponse::clear_rows() {
  _impl_.rows_.Clear();
}
inline ::backend::GetKVStoreStateResponse_Row* GetKVStoreStateResponse::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:backend.GetKVStoreStateResponse.rows)
  return _impl_.rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetKVStoreStateResponse_Row >*
GetKVStoreStateResponse::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:backend.GetKVStoreStateResponse.rows)
  return &_impl_.rows_;
}
inline const ::backend::GetKVStoreStateResponse_Row& GetKVStoreStateResponse::_internal_rows(int index) const {
  return _impl_.rows_.Get(index);
}
inline const ::backend::GetKVStoreStateResponse_Row& GetKVStoreStateResponse::rows(int index) const {
  // @@protoc_insertion_point(field_get:backend.GetKVStoreStateResponse.rows)
  return _internal_rows(index);
}
inline ::backend::GetKVStoreStateResponse_Row* GetKVStoreStateResponse::_internal_add_rows() {
  return _impl_.rows_.Add();
}
inline ::backend::GetKVStoreStateResponse_Row* GetKVStoreStateResponse::add_rows() {
  ::backend::GetKVStoreStateResponse_Row* _add = _internal_add_rows();
  // @@protoc_insertion_point(field_add:backend.GetKVStoreStateResponse.rows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::backend::GetKVStoreStateResponse_Row >&
GetKVStoreStateResponse::rows() const {
  // @@protoc_insertion_point(field_list:backend.GetKVStoreStateResponse.rows)
  return _impl_.rows_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace backend

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_masterserver_2eproto
