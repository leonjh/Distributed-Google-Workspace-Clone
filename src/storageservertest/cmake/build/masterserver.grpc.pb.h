// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: masterserver.proto
#ifndef GRPC_masterserver_2eproto__INCLUDED
#define GRPC_masterserver_2eproto__INCLUDED

#include "masterserver.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace backend {

class MasterServer final {
 public:
  static constexpr char const* service_full_name() {
    return "backend.MasterServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::backend::GetTabletsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsResponse>> AsyncGetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsResponse>>(AsyncGetTabletsForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsResponse>> PrepareAsyncGetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsResponse>>(PrepareAsyncGetTabletsForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::backend::GetTabletsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsResponse>> AsyncGetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsResponse>>(AsyncGetTabletsForServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsResponse>> PrepareAsyncGetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsResponse>>(PrepareAsyncGetTabletsForServerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetKVStoreState(::grpc::ClientContext* context, const ::backend::GetKVStoreStateRequest& request, ::backend::GetKVStoreStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetKVStoreStateResponse>> AsyncGetKVStoreState(::grpc::ClientContext* context, const ::backend::GetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetKVStoreStateResponse>>(AsyncGetKVStoreStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetKVStoreStateResponse>> PrepareAsyncGetKVStoreState(::grpc::ClientContext* context, const ::backend::GetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetKVStoreStateResponse>>(PrepareAsyncGetKVStoreStateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest* request, ::backend::GetTabletsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest* request, ::backend::GetTabletsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest* request, ::backend::GetTabletsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest* request, ::backend::GetTabletsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetKVStoreState(::grpc::ClientContext* context, const ::backend::GetKVStoreStateRequest* request, ::backend::GetKVStoreStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetKVStoreState(::grpc::ClientContext* context, const ::backend::GetKVStoreStateRequest* request, ::backend::GetKVStoreStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsResponse>* AsyncGetTabletsForUserRaw(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsResponse>* PrepareAsyncGetTabletsForUserRaw(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsResponse>* AsyncGetTabletsForServerRaw(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetTabletsResponse>* PrepareAsyncGetTabletsForServerRaw(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetKVStoreStateResponse>* AsyncGetKVStoreStateRaw(::grpc::ClientContext* context, const ::backend::GetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::backend::GetKVStoreStateResponse>* PrepareAsyncGetKVStoreStateRaw(::grpc::ClientContext* context, const ::backend::GetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::backend::GetTabletsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsResponse>> AsyncGetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsResponse>>(AsyncGetTabletsForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsResponse>> PrepareAsyncGetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsResponse>>(PrepareAsyncGetTabletsForUserRaw(context, request, cq));
    }
    ::grpc::Status GetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::backend::GetTabletsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsResponse>> AsyncGetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsResponse>>(AsyncGetTabletsForServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsResponse>> PrepareAsyncGetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsResponse>>(PrepareAsyncGetTabletsForServerRaw(context, request, cq));
    }
    ::grpc::Status GetKVStoreState(::grpc::ClientContext* context, const ::backend::GetKVStoreStateRequest& request, ::backend::GetKVStoreStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetKVStoreStateResponse>> AsyncGetKVStoreState(::grpc::ClientContext* context, const ::backend::GetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetKVStoreStateResponse>>(AsyncGetKVStoreStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetKVStoreStateResponse>> PrepareAsyncGetKVStoreState(::grpc::ClientContext* context, const ::backend::GetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::backend::GetKVStoreStateResponse>>(PrepareAsyncGetKVStoreStateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest* request, ::backend::GetTabletsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTabletsForUser(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest* request, ::backend::GetTabletsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest* request, ::backend::GetTabletsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTabletsForServer(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest* request, ::backend::GetTabletsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetKVStoreState(::grpc::ClientContext* context, const ::backend::GetKVStoreStateRequest* request, ::backend::GetKVStoreStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetKVStoreState(::grpc::ClientContext* context, const ::backend::GetKVStoreStateRequest* request, ::backend::GetKVStoreStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsResponse>* AsyncGetTabletsForUserRaw(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsResponse>* PrepareAsyncGetTabletsForUserRaw(::grpc::ClientContext* context, const ::backend::GetTabletsUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsResponse>* AsyncGetTabletsForServerRaw(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::GetTabletsResponse>* PrepareAsyncGetTabletsForServerRaw(::grpc::ClientContext* context, const ::backend::GetTabletsServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::GetKVStoreStateResponse>* AsyncGetKVStoreStateRaw(::grpc::ClientContext* context, const ::backend::GetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::backend::GetKVStoreStateResponse>* PrepareAsyncGetKVStoreStateRaw(::grpc::ClientContext* context, const ::backend::GetKVStoreStateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetTabletsForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTabletsForServer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetKVStoreState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetTabletsForUser(::grpc::ServerContext* context, const ::backend::GetTabletsUserRequest* request, ::backend::GetTabletsResponse* response);
    virtual ::grpc::Status GetTabletsForServer(::grpc::ServerContext* context, const ::backend::GetTabletsServerRequest* request, ::backend::GetTabletsResponse* response);
    virtual ::grpc::Status GetKVStoreState(::grpc::ServerContext* context, const ::backend::GetKVStoreStateRequest* request, ::backend::GetKVStoreStateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTabletsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTabletsForUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetTabletsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForUser(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsUserRequest* /*request*/, ::backend::GetTabletsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTabletsForUser(::grpc::ServerContext* context, ::backend::GetTabletsUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::GetTabletsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTabletsForServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTabletsForServer() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetTabletsForServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForServer(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsServerRequest* /*request*/, ::backend::GetTabletsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTabletsForServer(::grpc::ServerContext* context, ::backend::GetTabletsServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::GetTabletsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::GetKVStoreStateRequest* /*request*/, ::backend::GetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKVStoreState(::grpc::ServerContext* context, ::backend::GetKVStoreStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::backend::GetKVStoreStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetTabletsForUser<WithAsyncMethod_GetTabletsForServer<WithAsyncMethod_GetKVStoreState<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetTabletsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTabletsForUser() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::GetTabletsUserRequest, ::backend::GetTabletsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::GetTabletsUserRequest* request, ::backend::GetTabletsResponse* response) { return this->GetTabletsForUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetTabletsForUser(
        ::grpc::MessageAllocator< ::backend::GetTabletsUserRequest, ::backend::GetTabletsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::GetTabletsUserRequest, ::backend::GetTabletsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTabletsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForUser(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsUserRequest* /*request*/, ::backend::GetTabletsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTabletsForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::GetTabletsUserRequest* /*request*/, ::backend::GetTabletsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTabletsForServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTabletsForServer() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::GetTabletsServerRequest, ::backend::GetTabletsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::GetTabletsServerRequest* request, ::backend::GetTabletsResponse* response) { return this->GetTabletsForServer(context, request, response); }));}
    void SetMessageAllocatorFor_GetTabletsForServer(
        ::grpc::MessageAllocator< ::backend::GetTabletsServerRequest, ::backend::GetTabletsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::GetTabletsServerRequest, ::backend::GetTabletsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTabletsForServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForServer(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsServerRequest* /*request*/, ::backend::GetTabletsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTabletsForServer(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::GetTabletsServerRequest* /*request*/, ::backend::GetTabletsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::backend::GetKVStoreStateRequest, ::backend::GetKVStoreStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::backend::GetKVStoreStateRequest* request, ::backend::GetKVStoreStateResponse* response) { return this->GetKVStoreState(context, request, response); }));}
    void SetMessageAllocatorFor_GetKVStoreState(
        ::grpc::MessageAllocator< ::backend::GetKVStoreStateRequest, ::backend::GetKVStoreStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::backend::GetKVStoreStateRequest, ::backend::GetKVStoreStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::GetKVStoreStateRequest* /*request*/, ::backend::GetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetKVStoreState(
      ::grpc::CallbackServerContext* /*context*/, const ::backend::GetKVStoreStateRequest* /*request*/, ::backend::GetKVStoreStateResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetTabletsForUser<WithCallbackMethod_GetTabletsForServer<WithCallbackMethod_GetKVStoreState<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetTabletsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTabletsForUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetTabletsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForUser(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsUserRequest* /*request*/, ::backend::GetTabletsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTabletsForServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTabletsForServer() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetTabletsForServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForServer(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsServerRequest* /*request*/, ::backend::GetTabletsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::GetKVStoreStateRequest* /*request*/, ::backend::GetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTabletsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTabletsForUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetTabletsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForUser(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsUserRequest* /*request*/, ::backend::GetTabletsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTabletsForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTabletsForServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTabletsForServer() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetTabletsForServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForServer(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsServerRequest* /*request*/, ::backend::GetTabletsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTabletsForServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::GetKVStoreStateRequest* /*request*/, ::backend::GetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetKVStoreState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTabletsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTabletsForUser() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTabletsForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTabletsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForUser(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsUserRequest* /*request*/, ::backend::GetTabletsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTabletsForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTabletsForServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTabletsForServer() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTabletsForServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTabletsForServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTabletsForServer(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsServerRequest* /*request*/, ::backend::GetTabletsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTabletsForServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetKVStoreState(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::GetKVStoreStateRequest* /*request*/, ::backend::GetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetKVStoreState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTabletsForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTabletsForUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::GetTabletsUserRequest, ::backend::GetTabletsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::GetTabletsUserRequest, ::backend::GetTabletsResponse>* streamer) {
                       return this->StreamedGetTabletsForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTabletsForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTabletsForUser(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsUserRequest* /*request*/, ::backend::GetTabletsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTabletsForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::GetTabletsUserRequest,::backend::GetTabletsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTabletsForServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTabletsForServer() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::GetTabletsServerRequest, ::backend::GetTabletsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::GetTabletsServerRequest, ::backend::GetTabletsResponse>* streamer) {
                       return this->StreamedGetTabletsForServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTabletsForServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTabletsForServer(::grpc::ServerContext* /*context*/, const ::backend::GetTabletsServerRequest* /*request*/, ::backend::GetTabletsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTabletsForServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::GetTabletsServerRequest,::backend::GetTabletsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetKVStoreState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetKVStoreState() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::backend::GetKVStoreStateRequest, ::backend::GetKVStoreStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::backend::GetKVStoreStateRequest, ::backend::GetKVStoreStateResponse>* streamer) {
                       return this->StreamedGetKVStoreState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetKVStoreState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetKVStoreState(::grpc::ServerContext* /*context*/, const ::backend::GetKVStoreStateRequest* /*request*/, ::backend::GetKVStoreStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetKVStoreState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::backend::GetKVStoreStateRequest,::backend::GetKVStoreStateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetTabletsForUser<WithStreamedUnaryMethod_GetTabletsForServer<WithStreamedUnaryMethod_GetKVStoreState<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetTabletsForUser<WithStreamedUnaryMethod_GetTabletsForServer<WithStreamedUnaryMethod_GetKVStoreState<Service > > > StreamedService;
};

}  // namespace backend


#endif  // GRPC_masterserver_2eproto__INCLUDED
